{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Exports.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Error.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Guid.ts","webpack://[name]/./node_modules/tslib/tslib.es6.js","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/Exports.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/RecognitionEvents.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/IAuthentication.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/Exports.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/PlatformEvent.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech.browser/SpeechConnectionFactory.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/RecognizerConfig.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/WebsocketMessageAdapter.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Queue.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Promise.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/List.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/InMemoryStorage.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/EventSource.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/ConnectionMessage.ts","webpack://[name]/./src/Konsole.ts","webpack://[name]/./src/CognitiveServices/SpeechSynthesis.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech.browser/Recognizer.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech.browser/Exports.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/WebsocketMessageFormatter.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/SpeechResults.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/SpeechConnectionMessage.Internal.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/ServiceTelemetryListener.Internal.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/Recognizer.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/CognitiveTokenAuthentication.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/sdk/speech/CognitiveSubscriptionKeyAuthentication.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/WebsocketConnection.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/Timer.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/SessionStorage.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/PCMRecorder.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/OpusRecorder.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/MicAudioSource.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/LocalStorage.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Stream.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Storage.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/RiffPcmEncoder.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/RawWebsocketMessage.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/IConnection.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/Events.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/ConnectionOpenResponse.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/ConnectionEvents.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common/AudioSourceEvents.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/src/common.browser/ConsoleLoggingListener.ts","webpack://[name]/./node_modules/microsoft-speech-browser-sdk/Speech.Browser.Sdk.ts","webpack://[name]/./src/CognitiveServices/SpeechRecognition.ts","webpack://[name]/./src/CognitiveServices/lib.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__export","ArgumentNullError","_super","argumentName","_this","this","message","tslib_1","__extends","Error","InvalidOperationError","error","ObjectDisposedError","objectName","CreateGuid","Date","getTime","replace","Math","random","floor","toString","CreateNoDashGuid","RegExp","toUpperCase","__webpack_exports__","__asyncValues","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","__assign","assign","t","arguments","length","__rest","e","indexOf","getOwnPropertySymbols","__decorate","decorators","target","key","desc","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","throw","result","done","then","apply","__generator","body","f","y","g","_","label","sent","trys","ops","verb","return","Symbol","iterator","v","op","TypeError","pop","push","__exportStar","__values","__read","ar","__spread","concat","__await","__asyncGenerator","asyncIterator","q","a","resume","fulfill","settle","shift","__asyncDelegator","Exports_1","SpeechRecognitionEvent","eventName","requestId","eventType","EventType","Info","PlatformEvent","SpeechRecognitionResultEvent","RecognitionTriggeredEvent","audioSourceId","audioNodeId","ListeningStartedEvent","ConnectingToServiceEvent","authFetchEventid","connectionId","RecognitionStartedEvent","authFetchEventId","SpeechStartDetectedEvent","SpeechHypothesisEvent","SpeechEndDetectedEvent","SpeechSimplePhraseEvent","RecognitionCompletionStatus","SpeechDetailedPhraseEvent","RecognitionEndedEvent","serviceTag","status","Success","AuthInfo","headerName","token","Guid_1","eventId","eventTime","toISOString","Exports_2","Exports_3","TestHooksParamName","ConnectionIdHeader","SpeechConnectionFactory","Create","config","authInfo","endpoint","RecognitionMode","Conversation","Host","ConversationRelativeUri","Dictation","DictationRelativeUri","InteractiveRelativeUri","queryParams","format","SpeechResultFormat","Format","toLowerCase","language","Language","IsDebugModeEnabled","headers","HeaderName","Token","WebsocketConnection","WebsocketMessageFormatter","Storage","Local","GetOrAdd","RecognizerConfig","platformConfig","recognitionMode","Interactive","Simple","speechConfig","SpeechConfig","Context","recognitionActivityTimeout","context","Serialize","JSON","stringify","replacement","k","charAt","substring","os","device","system","System","version","OS","platform","Device","manufacturer","model","WebsocketMessageAdapter","uri","messageFormatter","Open","connectionState","ConnectionState","Disconnected","PromiseHelper","FromError","connectionEstablishDeferral","Deferred","Connecting","websocketClient","WebSocket","receivingMessageQueue","Queue","disconnectDeferral","sendMessageQueue","ProcessSendQueue","OnEvent","ConnectionStartEvent","onopen","Connected","ConnectionEstablishedEvent","Resolve","ConnectionOpenResponse","onerror","onclose","ConnectionEstablishErrorEvent","code","reason","ConnectionClosedEvent","OnClose","onmessage","networkReceivedTime","deferred_1","EnqueueFromPromise","data","Blob","fileReader_1","FileReader","onload","le","rawMessage","RawWebsocketMessage","MessageType","Binary","ToConnectionMessage","On","connectionMessage","ConnectionMessageReceivedEvent","Reject","ev","readAsArrayBuffer","Text","Send","messageSendStatusDeferral","messageSendDeferral","FromConnectionMessage","Message","SendStatusDeferral","Read","Dequeue","Close","deferral","close","SendRawMessage","sendItem","ConnectionMessageSentEvent","send","Payload","FromResult","closeReason","Dispose","DrainAndDispose","pendingReceiveItem","pendingSendItem","sendError","event","connectionEvents","Events","Instance","EventSource","None","SubscriberType","Error_1","List_1","Promise_1","list","promiseStore","List","isDrainInProgress","isDisposing","disposeReason","Enqueue","item","ThrowIfDispose","promise","Add","Finally","Length","First","Result","IsCompleted","RemoveFirst","IsError","deferredSubscriber","subscribers","type","Drain","Peek","IsDisposed","pendingItemProcessor","_i","_a","detachables","Detach","WhenAll","ToArray","ContinueWith","ForEach","index","subscriber","dequeuedItem","OnAdded","PromiseState","PromiseResult","promiseResultEventSource","ThrowIfError","isCompleted","isError","PromiseResultEventSource","SetResult","onSetResult","SetError","onSetError","promises","deferred","errors","completedPromises","checkForCompletion","join","promises_1","sink","continuationCallback","continuationDeferral","on","coninuationResult","OnSuccessContinueWith","ContinueWithPromise","continuationPromise","OnSuccessContinueWithPromise","successCallback","errorCallback","callback","callbackWrapper","State","Sink","state","promiseResult","promiseResultEvents","successHandlers","errorHandlers","Resolved","ExecuteSuccessCallback","DetachHandlers","Rejected","errorHandler","ExecuteErrorCallback","subscriptionIdCounter","addSubscriptions","removeSubscriptions","disposedSubscriptions","Get","itemIndex","ThrowIfDisposed","Last","InsertAt","unshift","splice","TriggerSubscriptions","RemoveAt","RemoveLast","Remove","count","removedElements","Clear","addedCallback","subscriptionId","OnRemoved","removedCallback","OnDisposed","disposedCallback","Join","seperator","cloneCopy","forEach","val","Any","Where","All","Select","selectList","filteredList","OrderBy","compareFn","sort","OrderByDesc","Clone","Concat","ConcatArray","array","subscriptions","list_1","InMemoryStorage","store","valueToAdd","undefined","Set","eventListeners","isDisposed","Metadata","paramName","Attach","onEventCallback","id","AttachListener","listener","ConnectionMessage","messageType","ArrayBuffer","log","optionalParams","console","SynthesisGender","konsole","SpeechSynthesizer","properties","_requestQueue","_isPlaying","_helper","CognitiveServicesHelper","_properties","speak","text","lang","onSpeakingStarted","onSpeakingFinished","isReadyToPlay","locale","getSpeechData","playAudio","stopSpeaking","_audioElement","top","AudioContext","decodeAudioData","buffer","source","createBufferSource","connect","destination","start","onended","slice","ex","setTimeout","latest","fetchSpeechData","props","_tokenURL","_synthesisURL","_outputFormat","_femaleVoiceMap","ar-eg","ca-es","da-dk","de-de","en-au","en-ca","en-gb","en-in","en-us","es-es","es-mx","fi-fi","fr-ca","fr-fr","hi-in","ja-jp","ko-kr","nb-no","nl-nl","pl-pl","pt-br","pt-pt","ru-ru","sv-se","tr-tr","zh-cn","zh-hk","zh-tw","_maleVoiceMap","ar-sa","cs-cz","de-at","de-ch","el-gr","en-ie","fr-ch","he-il","hu-hu","id-id","it-it","ro-ro","sk-sk","th-th","subscriptionKey","_tokenCallback","fetchSpeechToken","_tokenExpiredCallback","fetchCallback","fetchOnExpiryCallback","synthesisProperties","SSML","makeSSML","cbAfterToken","_lastTokenTime","now","optionalHeaders","makeHttpCall","processSSML","ssml","gender","voiceName","fetchVoiceName","Female","encodeHTML","processDone","match","exec","dom","DOMParser","parseFromString","nodes","documentElement","childNodes","nodeName","j","attributes","nodeValue","Male","attribute","createAttribute","setNamedItem","serializer","XMLSerializer","voiceNode","createElement","appendChild","firstChild","serializeToString","apiKey","actionType","url","isArrayBuffer","dataToSend","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","response","responseText","open","header","setRequestHeader","localeLowerCase","SpeechConnectionFactory_1","CreateRecognizer","recognizerConfig","authentication","CreateRecognizerWithPcmRecorder","CreateRecognizerWithCustomAudioSource","MicAudioSource","PcmRecorder","audioSource","Recognizer","CRLF","textMessage","TextContent","headerBodySplit","split","ParseHeaders","Id","binaryMessage","BinaryContent","byteLength","dataView","DataView","headerLength","getInt16","headersString","String","fromCharCode","getInt8","payload","MakeHeaders","TextBody","content_1","BinaryBody","fr_1","headerInt8Array","Int8Array","setInt16","setInt8","bodyInt8Array","Headers","headerMatches","headerMatches_1","seperatorIndex","substr","trim","headerValue","RecognitionStatus","PathHeaderName","ContentTypeHeaderName","RequestIdHeaderName","RequestTimestampHeaderName","SpeechConnectionMessage","path","contentType","additionalHeaders","Body","RecognitionEvents_1","ServiceTelemetryListener","listeningTriggerMetric","micMetric","connectionEstablishMetric","RequestId","End","EventTime","Name","Start","AudioStreamNodeAttachingEvent","AudioSourceId","AudioNodeId","micStartTime","AudioStreamNodeAttachedEvent","AudioSourceErrorEvent","AudioStreamNodeErrorEvent","AudioStreamNodeDetachedEvent","ConnectionId","connectionStartTime","GetConnectionError","StatusCode","receivedMessages","NetworkReceivedTime","GetTelemetry","metrics","telemetry","Metrics","ReceivedMessages","json","statusCode","RecognizerConfig_1","ServiceTelemetryListener_Internal_1","SpeechConnectionMessage_Internal_1","connectionFactory","Recognize","speechContextJson","requestSession","RequestSession","ListenForServiceTelemetry","OnAudioSourceAttachCompleted","audioNode","FetchConnection","connection","messageRetrievalPromise","ReceiveMessage","messageSendPromise","SendSpeechConfig","SendSpeechContext","SendAudio","completionPromise","SendTelemetryData","CompletionPromise","isUnAuthorized","connectionFetchPromise","OnPreConnectionStart","OnConnectionEstablishCompleted","authPromise","FetchOnExpiry","Fetch","OnAuthCompleted","Reason","Path","OnServiceTurnStartResponse","parse","OnServiceSpeechStartDetectedResponse","OnServiceSpeechHypothesisResponse","OnServiceSpeechEndDetectedResponse","IsContinuousRecognition","OnServiceSimpleSpeechPhraseResponse","OnServiceDetailedSpeechPhraseResponse","OnServiceTurnEndResponse","speechConfigJson","speechConfigConnectionId","telemetryData","audioStreamNode","audioStreamChunk","IsSpeechEnded","IsEnd","Buffer","isAudioNodeDetached","OnComplete","AudioSourceError","AuthTokenFetchError","UnAuthorized","ConnectError","DetachAudioNode","OnConnectionError","UnknownError","serviceTelemetryListener","requestCompletionDeferral","eventSource","IAuthentication_1","AuthHeader","CognitiveTokenAuthentication","CognitiveSubscriptionKeyAuthentication","WebsocketMessageAdapter_1","queryParameters","connectionMessageAdapter","encodeURIComponent","Timer","delayInMillisec","params","timerId","stop","clearTimeout","SessionStorage","sessionStorage","getItem","setItem","removeItem","Record","mediaStream","outputStream","audioContext","mediaStreamSource","createMediaStreamSource","bufferSize","isFirstFrameWritten","desiredSampleRate","sampleRate","scriptNode","createScriptProcessor","waveStreamEncoder","RiffPcmEncoder","onaudioprocess","audioProcessingEvent","encodedAudioFrameWithRiffHeader","encodedAudioFrame","monoAudioChunk","inputBuffer","getChannelData","Encode","Write","mediaResources","scriptProcessorNode","stream","ReleaseMediaResources","disconnect","getTracks","track","OpusRecorder","options","mediaRecorder","MediaRecorder","mediaRecorderOptions","ondataavailable","dataAvailableEvent","reader_1","onloadend","recorder","streams","TurnOn","initializeDeferral","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","AudioSourceInitializingEvent","audio","AudioSourceReadyEvent","errorMsg","Listen","streamReader","TurnOff","streamId","AudioSourceOffEvent","Stream","GetReader","events","LocalStorage","localStorage","Queue_1","readerIdCounter","isEnded","ThrowIfClosed","WriteStreamChunk","readerId","readerQueue","currentLength","streambuffer","readerQueues","StreamReader","streamChunk","onClose","isClosed","IsClosed","InMemoryStorage_1","SetSessionStorage","SetLocalStorage","actualSampleRate","channelCount","isFirstAudioFrame","actualAudioFrame","audioFrame","DownSampleAudioFrame","audioLength","buffer_1","view_1","FloatTo16BitPCM","view","SetString","setUint32","setUint16","bitsPerSample","offset","str","setUint8","charCodeAt","input","max","min","desiredSamplerate","sampleRateRatio","newLength","round","downSampledAudioFrame","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","ConnectionMessage_1","EventSource_1","instance","SetEventSource","PlatformEvent_1","ConnectionEvent","Warning","statuscode","networkReceivedTimeISO","networkSentTimeISO","networkSentTime","AudioSourceEvent","AudioStreamNodeEvent","ConsoleLoggingListener","logLevelFilter","ToString","Debug","debug","info","warn","logFragments","prop","valueToLog","CognitiveSpeech","SpeechRecognizer","audioStreamStartInitiated","isStreamingToService","onIntermediateResult","onFinalResult","onAudioStreamingToService","onRecognitionFailed","actualRecognizer","userAgent","err","warmup","startRecognizing","speechContext","referenceGrammarId","dgi","Groups","Type","Hints","ReferenceGrammar","hypothesisEvent","simplePhraseEvent","DisplayText","speechIsAvailable","stopRecognizing","AudioSource","SpeechRecognition_1","SpeechSynthesis_1"],"mappings":"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","file":"./CognitiveServices.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CognitiveServices\"] = factory();\n\telse\n\t\troot[\"CognitiveServices\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 58);\n","\r\nexport * from \"./AudioSourceEvents\";\r\nexport * from \"./ConnectionEvents\";\r\nexport * from \"./ConnectionMessage\";\r\nexport * from \"./ConnectionOpenResponse\";\r\nexport * from \"./Error\";\r\nexport * from \"./Events\";\r\nexport * from \"./EventSource\";\r\nexport * from \"./Guid\";\r\nexport * from \"./IAudioSource\";\r\nexport * from \"./IConnection\";\r\nexport * from \"./IDetachable\";\r\nexport * from \"./IDictionary\";\r\nexport * from \"./IDisposable\";\r\nexport * from \"./IEventSource\";\r\nexport * from \"./IKeyValueStorage\";\r\nexport * from \"./InMemoryStorage\";\r\nexport * from \"./ITimer\";\r\nexport * from \"./IWebsocketMessageFormatter\";\r\nexport * from \"./List\";\r\nexport * from \"./PlatformEvent\";\r\nexport * from \"./Promise\";\r\nexport * from \"./Queue\";\r\nexport * from \"./RawWebsocketMessage\";\r\nexport * from \"./RiffPcmEncoder\";\r\nexport * from \"./Storage\";\r\nexport * from \"./Stream\";\r\n","\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName The object that is disposed\r\n     * @param {string} error The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","\r\nconst CreateGuid: () => string = (): string => {\r\n    let d = new Date().getTime();\r\n    const guid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c: string) => {\r\n        const r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n\r\n    return guid;\r\n};\r\n\r\nconst CreateNoDashGuid: () => string = (): string => {\r\n    return CreateGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n};\r\n\r\nexport { CreateGuid, CreateNoDashGuid };\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","\r\nexport * from \"./ConsoleLoggingListener\";\r\nexport * from \"./IRecorder\";\r\nexport * from \"./LocalStorage\";\r\nexport * from \"./MicAudioSource\";\r\nexport * from \"./OpusRecorder\";\r\nexport * from \"./PCMRecorder\";\r\nexport * from \"./SessionStorage\";\r\nexport * from \"./Timer\";\r\nexport * from \"./WebsocketConnection\";\r\nexport * from \"./WebsocketMessageAdapter\";\r\n","import { EventType, PlatformEvent } from \"../../common/Exports\";\r\nimport {\r\n    IDetailedSpeechPhrase,\r\n    ISimpleSpeechPhrase,\r\n    ISpeechEndDetectedResult,\r\n    ISpeechHypothesisResult,\r\n    ISpeechStartDetectedResult,\r\n} from \"./SpeechResults\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private eventName: string;\r\n    private requestId: string;\r\n\r\n    constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventType);\r\n\r\n        this.eventName = eventName;\r\n        this.requestId = requestId;\r\n    }\r\n\r\n    public get Name(): string {\r\n        return this.eventName;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechRecognitionResultEvent<TResult> extends SpeechRecognitionEvent {\r\n    private result: TResult;\r\n\r\n    constructor(eventName: string, requestId: string, result: TResult) {\r\n        super(eventName, requestId);\r\n        this.result = result;\r\n    }\r\n\r\n    public get Result(): TResult {\r\n        return this.result;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId);\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private authFetchEventid: string;\r\n    private connectionId: string;\r\n\r\n    constructor(requestId: string, authFetchEventid: string, connectionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId);\r\n        this.authFetchEventid = authFetchEventid;\r\n        this.connectionId = connectionId;\r\n    }\r\n\r\n    public get AuthFetchEventid(): string {\r\n        return this.authFetchEventid;\r\n    }\r\n\r\n    public get ConnectionId(): string {\r\n        return this.connectionId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private authFetchEventId: string;\r\n    private connectionId: string;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, connectionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n        this.authFetchEventId = authFetchEventId;\r\n        this.connectionId = connectionId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get AuthFetchEventId(): string {\r\n        return this.authFetchEventId;\r\n    }\r\n\r\n    public get ConnectionId(): string {\r\n        return this.connectionId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechStartDetectedEvent extends SpeechRecognitionResultEvent<ISpeechStartDetectedResult> {\r\n    constructor(requestId: string, result: ISpeechStartDetectedResult) {\r\n        super(\"SpeechStartDetectedEvent\", requestId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechHypothesisEvent extends SpeechRecognitionResultEvent<ISpeechHypothesisResult> {\r\n    constructor(requestId: string, result: ISpeechHypothesisResult) {\r\n        super(\"SpeechHypothesisEvent\", requestId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechEndDetectedEvent extends SpeechRecognitionResultEvent<ISpeechEndDetectedResult> {\r\n    constructor(requestId: string, result: ISpeechEndDetectedResult) {\r\n        super(\"SpeechEndDetectedEvent\", requestId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechSimplePhraseEvent extends SpeechRecognitionResultEvent<ISimpleSpeechPhrase> {\r\n    constructor(requestId: string, result: ISimpleSpeechPhrase) {\r\n        super(\"SpeechSimplePhraseEvent\", requestId, result);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechDetailedPhraseEvent extends SpeechRecognitionResultEvent<IDetailedSpeechPhrase> {\r\n    constructor(requestId: string, result: IDetailedSpeechPhrase) {\r\n        super(\"SpeechDetailedPhraseEvent\", requestId, result);\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private authFetchEventId: string;\r\n    private connectionId: string;\r\n    private serviceTag: string;\r\n    private status: RecognitionCompletionStatus;\r\n    private error: string;\r\n\r\n    constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        connectionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n        this.connectionId = connectionId;\r\n        this.authFetchEventId = authFetchEventId;\r\n\r\n        this.serviceTag = serviceTag;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get AuthFetchEventId(): string {\r\n        return this.authFetchEventId;\r\n    }\r\n\r\n    public get ConnectionId(): string {\r\n        return this.connectionId;\r\n    }\r\n\r\n    public get ServiceTag(): string {\r\n        return this.serviceTag;\r\n    }\r\n\r\n    public get Status(): RecognitionCompletionStatus {\r\n        return this.status;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n","import { Promise } from \"../../common/Exports\";\r\n\r\nexport interface IAuthentication {\r\n    Fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    FetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private headerName: string;\r\n    private token: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.headerName = headerName;\r\n        this.token = token;\r\n    }\r\n\r\n    public get HeaderName(): string {\r\n        return this.headerName;\r\n    }\r\n\r\n    public get Token(): string {\r\n        return this.token;\r\n    }\r\n}\r\n","\r\n// IMPORTANT - Dont publish internal modules.\r\n\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./Recognizer\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechResults\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\n","import { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private eventId: string;\r\n    private eventTime: string;\r\n    private eventType: EventType;\r\n    private metadata: IStringDictionary<string>;\r\n\r\n    constructor(eventType: EventType) {\r\n        this.eventId = CreateNoDashGuid();\r\n        this.eventTime = new Date().toISOString();\r\n        this.eventType = eventType;\r\n        this.metadata = { };\r\n    }\r\n\r\n    public get EventId(): string {\r\n        return this.eventId;\r\n    }\r\n\r\n    public get EventTime(): string {\r\n        return this.eventTime;\r\n    }\r\n\r\n    public get EventType(): EventType {\r\n        return this.eventType;\r\n    }\r\n\r\n    public get Metadata(): IStringDictionary<string> {\r\n        return this.metadata;\r\n    }\r\n}\r\n","import { WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n    Promise,\r\n    Storage,\r\n} from \"../../common/Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    SpeechResultFormat,\r\n    WebsocketMessageFormatter,\r\n} from \"../speech/Exports\";\r\n\r\nconst TestHooksParamName: string = \"testhooks\";\r\nconst ConnectionIdHeader: string = \"X-ConnectionId\";\r\n\r\nexport class SpeechConnectionFactory implements IConnectionFactory {\r\n\r\n    public Create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint = \"\";\r\n        switch (config.RecognitionMode) {\r\n            case RecognitionMode.Conversation:\r\n                endpoint = this.Host + this.ConversationRelativeUri;\r\n                break;\r\n            case RecognitionMode.Dictation:\r\n                endpoint = this.Host + this.DictationRelativeUri;\r\n                break;\r\n            default:\r\n                endpoint = this.Host + this.InteractiveRelativeUri; // default is interactive\r\n                break;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: SpeechResultFormat[config.Format].toString().toLowerCase(),\r\n            language: config.Language,\r\n        };\r\n\r\n        if (this.IsDebugModeEnabled) {\r\n            queryParams[TestHooksParamName] = \"1\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.HeaderName] = authInfo.Token;\r\n        headers[ConnectionIdHeader] = connectionId;\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), connectionId);\r\n    }\r\n\r\n    private get Host(): string {\r\n        return Storage.Local.GetOrAdd(\"Host\", \"wss://speech.platform.bing.com\");\r\n    }\r\n\r\n    private get InteractiveRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"InteractiveRelativeUri\", \"/speech/recognition/interactive/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get ConversationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"ConversationRelativeUri\", \"/speech/recognition/conversation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get DictationRelativeUri(): string {\r\n        return Storage.Local.GetOrAdd(\"DictationRelativeUri\", \"/speech/recognition/dictation/cognitiveservices/v1\");\r\n    }\r\n\r\n    private get IsDebugModeEnabled(): boolean {\r\n        const value = Storage.Local.GetOrAdd(\"IsDebugModeEnabled\", \"false\");\r\n        return value.toLowerCase() === \"true\";\r\n    }\r\n}\r\n","\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private recognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private language: string;\r\n    private format: SpeechResultFormat;\r\n    private speechConfig: SpeechConfig;\r\n    private recognitionActivityTimeout: number;\r\n\r\n    constructor(\r\n        platformConfig: SpeechConfig,\r\n        recognitionMode: RecognitionMode = RecognitionMode.Interactive,\r\n        language: string = \"en-us\",\r\n        format: SpeechResultFormat = SpeechResultFormat.Simple) {\r\n        this.speechConfig = platformConfig ? platformConfig : new SpeechConfig(new Context(null, null));\r\n        this.recognitionMode = recognitionMode;\r\n        this.language = language;\r\n        this.format = format;\r\n        this.recognitionActivityTimeout = recognitionMode === RecognitionMode.Interactive ? 8000 : 25000;\r\n    }\r\n\r\n    public get RecognitionMode(): RecognitionMode {\r\n        return this.recognitionMode;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.language;\r\n    }\r\n\r\n    public get Format(): SpeechResultFormat{\r\n        return this.format;\r\n    }\r\n\r\n    public get SpeechConfig(): SpeechConfig {\r\n        return this.speechConfig;\r\n    }\r\n\r\n    public get RecognitionActivityTimeout(): number {\r\n        return this.recognitionActivityTimeout;\r\n    }\r\n\r\n    public get IsContinuousRecognition(): boolean {\r\n        return this.recognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechConfig {\r\n    private context: Context;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public Serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any) : any => {\r\n        if (value && typeof value === \"object\") {\r\n            const replacement: any = {};\r\n            for (const k in value) {\r\n                if (Object.hasOwnProperty.call(value, k)) {\r\n                    replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                }\r\n            }\r\n            return replacement;\r\n        }\r\n        return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context{\r\n        return this.context;\r\n    }\r\n\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Context {\r\n    private system: System;\r\n    private os: OS;\r\n    private device: Device;\r\n\r\n    constructor(os: OS, device: Device) {\r\n        this.system = new System();\r\n        this.os = os;\r\n        this.device = device;\r\n    }\r\n\r\n    public get System(): System {\r\n        return this.system;\r\n    }\r\n\r\n    public get OS(): OS {\r\n        return this.os;\r\n    }\r\n\r\n    public get Device(): Device {\r\n        return this.device;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class System {\r\n    private version: string;\r\n    constructor() {\r\n        // TODO: Tie this with the sdk Version somehow\r\n        this.version = \"1.0.00000\";\r\n    }\r\n    public get Version(): string {\r\n        // Controlled by sdk\r\n        return this.version;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class OS {\r\n\r\n    private platform: string;\r\n    private name: string;\r\n    private version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n\r\n    public get Platform(): string {\r\n        return this.platform;\r\n    }\r\n\r\n    public get Name(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public get Version(): string {\r\n        return this.version;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Device {\r\n\r\n    private manufacturer: string;\r\n    private model: string;\r\n    private version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n\r\n    public get Manufacturer(): string {\r\n        return this.manufacturer;\r\n    }\r\n\r\n    public get Model(): string {\r\n        return this.model;\r\n    }\r\n\r\n    public get Version(): string {\r\n        return this.version;\r\n    }\r\n}\r\n","import {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    SendStatusDeferral: Deferred<boolean>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n\r\n    private connectionState: ConnectionState;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private websocketClient: WebSocket;\r\n\r\n    private sendMessageQueue: Queue<ISendItem>;\r\n    private receivingMessageQueue: Queue<ConnectionMessage>;\r\n    private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private disconnectDeferral: Deferred<boolean>;\r\n    private connectionEvents: EventSource<ConnectionEvent>;\r\n    private connectionId: string;\r\n    private uri: string;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.connectionEvents = new EventSource<ConnectionEvent>();\r\n        this.connectionId = connectionId;\r\n        this.messageFormatter = messageFormatter;\r\n        this.connectionState = ConnectionState.None;\r\n        this.uri = uri;\r\n    }\r\n\r\n    public get State(): ConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        if (this.connectionEstablishDeferral) {\r\n            return this.connectionEstablishDeferral.Promise();\r\n        }\r\n\r\n        this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.websocketClient = new WebSocket(this.uri);\r\n        this.receivingMessageQueue = new Queue<ConnectionMessage>();\r\n        this.disconnectDeferral = new Deferred<boolean>();\r\n        this.sendMessageQueue = new Queue<ISendItem>();\r\n        this.ProcessSendQueue();\r\n\r\n        this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\r\n\r\n        this.websocketClient.onopen = (e: Event) => {\r\n            this.connectionState = ConnectionState.Connected;\r\n            this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\r\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\r\n        };\r\n\r\n        this.websocketClient.onerror = (e: Event) => {\r\n            // TODO: Understand what this is error is. Will we still get onClose ?\r\n            if (this.connectionState !== ConnectionState.Connecting) {\r\n                // TODO: Is this required ?\r\n                // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\r\n            }\r\n        };\r\n\r\n        this.websocketClient.onclose = (e: CloseEvent) => {\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                this.connectionState = ConnectionState.Disconnected;\r\n                this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\r\n            } else {\r\n                this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.OnClose(e.code, e.reason);\r\n        };\r\n\r\n        this.websocketClient.onmessage = (e: MessageEvent) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.connectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\r\n                if (e.data instanceof Blob) {\r\n                    const fileReader = new FileReader();\r\n                    fileReader.onload = (le: Event) => {\r\n                        const rawMessage = new RawWebsocketMessage(MessageType.Binary, fileReader.result);\r\n                        this.messageFormatter\r\n                            .ToConnectionMessage(rawMessage)\r\n                            .On((connectionMessage: ConnectionMessage) => {\r\n                                this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                                deferred.Resolve(connectionMessage);\r\n                            }, (error: string) => {\r\n                                // TODO: Events for these ?\r\n                                deferred.Reject(`Invalid binary message format. Error: ${error}`);\r\n                            });\r\n                    };\r\n                    fileReader.onerror = (ev: Event) => {\r\n                        // TODO: Events for these ?\r\n                        deferred.Reject(\"Binary message parse error\");\r\n                    };\r\n\r\n                    fileReader.readAsArrayBuffer(e.data);\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.messageFormatter\r\n                        .ToConnectionMessage(rawMessage)\r\n                        .On((connectionMessage: ConnectionMessage) => {\r\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.Resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.Reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.connectionEstablishDeferral.Promise();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<boolean>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\r\n\r\n        this.messageFormatter\r\n            .FromConnectionMessage(message)\r\n            .On((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.Resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    SendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.Reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.Promise();\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\r\n        }\r\n\r\n        return this.receivingMessageQueue.Dequeue();\r\n    }\r\n\r\n    public Close = (reason?: string): Promise<boolean> => {\r\n        if (this.websocketClient) {\r\n            if (this.connectionState !== ConnectionState.Connected) {\r\n                this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            const deferral = new Deferred<boolean>();\r\n            deferral.Resolve(true);\r\n            return deferral.Promise();\r\n        }\r\n\r\n        return this.disconnectDeferral.Promise();\r\n    }\r\n\r\n    public get Events(): EventSource<PlatformEvent> {\r\n        return this.connectionEvents;\r\n    }\r\n\r\n    private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\r\n        try {\r\n            this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\r\n            this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\r\n            return PromiseHelper.FromResult(true);\r\n        } catch (e) {\r\n            return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private OnClose = (code: number, reason: string): void => {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.disconnectDeferral.Resolve(true);\r\n        this.receivingMessageQueue.Dispose(reason);\r\n        this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.SendStatusDeferral.Reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private ProcessSendQueue = (): void => {\r\n        this.sendMessageQueue\r\n            .Dequeue()\r\n            .On((sendItem: ISendItem) => {\r\n                this.SendRawMessage(sendItem)\r\n                    .On((result: boolean) => {\r\n                        sendItem.SendStatusDeferral.Resolve(result);\r\n                        this.ProcessSendQueue();\r\n                    }, (sendError: string) => {\r\n                        sendItem.SendStatusDeferral.Reject(sendError);\r\n                        this.ProcessSendQueue();\r\n                    });\r\n            }, (error: string) => {\r\n                // do nothing\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: ConnectionEvent): void => {\r\n        this.connectionEvents.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n","import { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport { Deferred, Promise, PromiseHelper } from \"./Promise\";\r\n\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    Enqueue(item: TItem): void;\r\n    EnqueueFromPromise(promise: Promise<TItem>): void;\r\n    Dequeue(): Promise<TItem>;\r\n    Peek(): Promise<TItem>;\r\n    Length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private promiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private list: List<TItem>;\r\n    private detachables: IDetachable[];\r\n    private subscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private isDrainInProgress: boolean = false;\r\n    private isDisposing: boolean = false;\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.list = list ? list : new List<TItem>();\r\n        this.detachables = [];\r\n        this.subscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.detachables.push(this.list.OnAdded(this.Drain));\r\n    }\r\n\r\n    public Enqueue = (item: TItem): void => {\r\n        this.ThrowIfDispose();\r\n        this.EnqueueFromPromise(PromiseHelper.FromResult(item));\r\n    }\r\n\r\n    public EnqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.ThrowIfDispose();\r\n        this.promiseStore.Add(promise);\r\n        promise.Finally(() => {\r\n            while (this.promiseStore.Length() > 0) {\r\n                if (!this.promiseStore.First().Result().IsCompleted) {\r\n                    break;\r\n                } else {\r\n                    const p = this.promiseStore.RemoveFirst();\r\n                    if (!p.Result().IsError) {\r\n                        this.list.Add(p.Result().Result);\r\n                    } else {\r\n                        // TODO: Log as warning.\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public Dequeue = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n        this.Drain();\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Peek = (): Promise<TItem> => {\r\n        this.ThrowIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n        this.subscribers.Add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n        this.Drain();\r\n        return deferredSubscriber.Promise();\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDispose();\r\n        return this.list.Length();\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.subscribers == null;\r\n    }\r\n\r\n    public DrainAndDispose = (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<boolean> => {\r\n        if (!this.IsDisposed() && !this.isDisposing) {\r\n            this.disposeReason = reason;\r\n            this.isDisposing = true;\r\n            while (this.subscribers.Length() > 0) {\r\n                const subscriber = this.subscribers.RemoveFirst();\r\n                subscriber.deferral.Reject(\"Disposed\");\r\n            }\r\n\r\n            for (const detachable of this.detachables) {\r\n                detachable.Detach();\r\n            }\r\n\r\n            if (this.promiseStore.Length() > 0 && pendingItemProcessor) {\r\n                return PromiseHelper\r\n                    .WhenAll(this.promiseStore.ToArray())\r\n                    .ContinueWith(() => {\r\n                        this.subscribers = null;\r\n                        this.list.ForEach((item: TItem, index: number): void => {\r\n                            pendingItemProcessor(item);\r\n                        });\r\n                        this.list = null;\r\n                        return true;\r\n                    });\r\n            } else {\r\n                this.subscribers = null;\r\n                this.list = null;\r\n            }\r\n        }\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        this.DrainAndDispose(null, reason);\r\n    }\r\n\r\n    private Drain = (): void => {\r\n        if (!this.isDrainInProgress && !this.isDisposing) {\r\n            this.isDrainInProgress = true;\r\n\r\n            while (this.list.Length() > 0 && this.subscribers.Length() > 0 && !this.isDisposing) {\r\n                const subscriber = this.subscribers.RemoveFirst();\r\n                if (subscriber.type === SubscriberType.Peek) {\r\n                    subscriber.deferral.Resolve(this.list.First());\r\n                } else {\r\n                    const dequeuedItem = this.list.RemoveFirst();\r\n                    subscriber.deferral.Resolve(dequeuedItem);\r\n                }\r\n            }\r\n\r\n            this.isDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private ThrowIfDispose = (): void => {\r\n        if (this.IsDisposed()) {\r\n            if (this.disposeReason) {\r\n                throw new InvalidOperationError(this.disposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.isDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","import { ArgumentNullError  } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IPromise<T> {\r\n    Result(): PromiseResult<T>;\r\n\r\n    ContinueWith<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    ContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWith<TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): IPromise<TContinuationResult>;\r\n\r\n    OnSuccessContinueWithPromise<TContinuationResult>(\r\n        continuationCallback: (result: T) => IPromise<TContinuationResult>): IPromise<TContinuationResult>;\r\n\r\n    On(successCallback: (result: T) => void, errorCallback: (error: string) => void): IPromise<T>;\r\n\r\n    Finally(callback: () => void): IPromise<T>;\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    State(): PromiseState;\r\n\r\n    Promise(): IPromise<T>;\r\n\r\n    Resolve(result: T): IDeferred<T>;\r\n\r\n    Reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected isCompleted: boolean;\r\n    protected isError: boolean;\r\n    protected error: string;\r\n    protected result: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.On((result: T) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = false;\r\n                this.result = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.isCompleted) {\r\n                this.isCompleted = true;\r\n                this.isError = true;\r\n                this.error = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get IsCompleted(): boolean {\r\n        return this.isCompleted;\r\n    }\r\n\r\n    public get IsError(): boolean {\r\n        return this.isError;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n\r\n    public get Result(): T {\r\n        return this.result;\r\n    }\r\n\r\n    public ThrowIfError = (): void => {\r\n        if (this.IsError) {\r\n            throw this.Error;\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private onSetResult: (result: T) => void;\r\n    private onSetError: (error: string) => void;\r\n\r\n    public SetResult = (result: T): void => {\r\n        this.onSetResult(result);\r\n    }\r\n\r\n    public SetError = (error: string): void => {\r\n        this.onSetError(error);\r\n    }\r\n\r\n    public On = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.onSetResult = onSetResult;\r\n        this.onSetError = onSetError;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class PromiseHelper {\r\n    public static WhenAll = (promises: Array<Promise<any>>): Promise<boolean> => {\r\n        if (!promises || promises.length === 0) {\r\n            throw new ArgumentNullError(\"promises\");\r\n        }\r\n\r\n        const deferred = new Deferred<boolean>();\r\n        const errors: string[] = [];\r\n        let completedPromises: number = 0;\r\n\r\n        const checkForCompletion = () => {\r\n            completedPromises++;\r\n            if (completedPromises === promises.length) {\r\n                if (errors.length === 0) {\r\n                    deferred.Resolve(true);\r\n                } else {\r\n                    deferred.Reject(errors.join(\", \"));\r\n                }\r\n            }\r\n        };\r\n\r\n        for (const promise of promises) {\r\n            promise.On((r: any) => {\r\n                checkForCompletion();\r\n            }, (e: string) => {\r\n                errors.push(e);\r\n                checkForCompletion();\r\n            });\r\n        }\r\n\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromResult = <TResult>(result: TResult): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Resolve(result);\r\n        return deferred.Promise();\r\n    }\r\n\r\n    public static FromError = <TResult>(error: string): Promise<TResult> => {\r\n        const deferred = new Deferred<TResult>();\r\n        deferred.Reject(error);\r\n        return deferred.Promise();\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Promise<T> implements IPromise<T> {\r\n\r\n    private sink: Sink<T>;\r\n\r\n    public constructor(sink: Sink<T>) {\r\n        this.sink = sink;\r\n    }\r\n\r\n    public Result = (): PromiseResult<T> => {\r\n        return this.sink.Result;\r\n    }\r\n\r\n    public ContinueWith = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const coninuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(coninuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const coninuationResult: TContinuationResult = continuationCallback(this.sink.Result);\r\n                    continuationDeferral.Resolve(coninuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWith = <TContinuationResult>(\r\n        continuationCallback: (result: T) => TContinuationResult): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const coninuationResult: TContinuationResult = continuationCallback(r);\r\n                    continuationDeferral.Resolve(coninuationResult);\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}'`);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public ContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (promiseResult: PromiseResult<T>) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"'Contuniation callback did not return promise'\");\r\n                    }\r\n                    continuationPromise.On((coninuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(coninuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(this.sink.Result);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Contuniation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((coninuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(coninuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n                }\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public OnSuccessContinueWithPromise = <TContinuationResult>(\r\n        continuationCallback: (result: T) => Promise<TContinuationResult>): Promise<TContinuationResult> => {\r\n\r\n        if (!continuationCallback) {\r\n            throw new ArgumentNullError(\"continuationCallback\");\r\n        }\r\n\r\n        const continuationDeferral = new Deferred<TContinuationResult>();\r\n\r\n        this.sink.on(\r\n            (r: T) => {\r\n                try {\r\n                    const continuationPromise: Promise<TContinuationResult> = continuationCallback(r);\r\n                    if (!continuationPromise) {\r\n                        throw new Error(\"Contuniation callback did not return promise\");\r\n                    }\r\n                    continuationPromise.On((coninuationResult: TContinuationResult) => {\r\n                        continuationDeferral.Resolve(coninuationResult);\r\n                    }, (e: string) => {\r\n                        continuationDeferral.Reject(e);\r\n                    });\r\n                } catch (e) {\r\n                    continuationDeferral.Reject(`'Unhandled callback error: ${e}'`);\r\n                }\r\n            },\r\n            (error: string) => {\r\n                continuationDeferral.Reject(`'Unhandled callback error: ${error}.'`);\r\n            },\r\n        );\r\n\r\n        return continuationDeferral.Promise();\r\n    }\r\n\r\n    public On = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): Promise<T> => {\r\n        if (!successCallback) {\r\n            throw new ArgumentNullError(\"successCallback\");\r\n        }\r\n\r\n        if (!errorCallback) {\r\n            throw new ArgumentNullError(\"errorCallback\");\r\n        }\r\n\r\n        this.sink.on(successCallback, errorCallback);\r\n        return this;\r\n    }\r\n\r\n    public Finally = (callback: () => void): Promise<T> => {\r\n        if (!callback) {\r\n            throw new ArgumentNullError(\"callback\");\r\n        }\r\n\r\n        const callbackWrapper = (_: any) => {\r\n            callback();\r\n        };\r\n\r\n        return this.On(callbackWrapper, callbackWrapper);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Deferred<T> implements IDeferred<T> {\r\n\r\n    private promise: Promise<T>;\r\n    private sink: Sink<T>;\r\n\r\n    public constructor() {\r\n        this.sink = new Sink<T>();\r\n        this.promise = new Promise<T>(this.sink);\r\n    }\r\n\r\n    public State = (): PromiseState => {\r\n        return this.sink.State;\r\n    }\r\n\r\n    public Promise = (): Promise<T> => {\r\n        return this.promise;\r\n    }\r\n\r\n    public Resolve = (result: T): Deferred<T> => {\r\n        this.sink.Resolve(result);\r\n        return this;\r\n    }\r\n\r\n    public Reject = (error: string): Deferred<T> => {\r\n        this.sink.Reject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class Sink<T> {\r\n\r\n    private state: PromiseState = PromiseState.None;\r\n    private promiseResult: PromiseResult<T> = null;\r\n    private promiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private successHandlers: Array<((result: T) => void)> = [];\r\n    private errorHandlers: Array<(e: string) => void> = [];\r\n\r\n    public constructor() {\r\n        this.promiseResultEvents = new PromiseResultEventSource();\r\n        this.promiseResult = new PromiseResult(this.promiseResultEvents);\r\n    }\r\n\r\n    public get State(): PromiseState {\r\n        return this.state;\r\n    }\r\n\r\n    public get Result(): PromiseResult<T> {\r\n        return this.promiseResult;\r\n    }\r\n\r\n    public Resolve = (result: T): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Resolved;\r\n        this.promiseResultEvents.SetResult(result);\r\n\r\n        for (let i = 0; i < this.successHandlers.length; i++) {\r\n            this.ExecuteSuccessCallback(result, this.successHandlers[i], this.errorHandlers[i]);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public Reject = (error: string): void => {\r\n        if (this.state !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.state = PromiseState.Rejected;\r\n        this.promiseResultEvents.SetError(error);\r\n\r\n        for (const errorHandler of this.errorHandlers) {\r\n            this.ExecuteErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.DetachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.state === PromiseState.None) {\r\n            this.successHandlers.push(successCallback);\r\n            this.errorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.state === PromiseState.Resolved) {\r\n                this.ExecuteSuccessCallback(this.promiseResult.Result, successCallback, errorCallback);\r\n            } else if (this.state === PromiseState.Rejected) {\r\n                this.ExecuteErrorCallback(this.promiseResult.Error, errorCallback);\r\n            }\r\n\r\n            this.DetachHandlers();\r\n        }\r\n    }\r\n\r\n    private ExecuteSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.ExecuteErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private ExecuteErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private DetachHandlers = (): void => {\r\n        this.errorHandlers = [];\r\n        this.successHandlers = [];\r\n    }\r\n}\r\n","import { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    Get(itemIndex: number): TItem;\r\n    First(): TItem;\r\n    Last(): TItem;\r\n\r\n    Add(item: TItem): void;\r\n    InsertAt(index: number, item: TItem): void;\r\n\r\n    RemoveFirst(): TItem;\r\n    RemoveLast(): TItem;\r\n    RemoveAt(index: number): TItem;\r\n    Remove(index: number, count: number): TItem[];\r\n    Clear(): void;\r\n\r\n    Length(): number;\r\n\r\n    OnAdded(addedCallback: () => void): IDetachable;\r\n    OnRemoved(removedCallback: () => void): IDetachable;\r\n    OnDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    Join(seperator?: string): string;\r\n\r\n    ToArray(): TItem[];\r\n\r\n    Any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    All(callback: (item: TItem) => boolean): boolean;\r\n    ForEach(callback: (item: TItem, index: number) => void): void;\r\n    Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    Clone(): List<TItem>;\r\n    Concat(list: List<TItem>): List<TItem>;\r\n    ConcatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private list: TItem[];\r\n    private subscriptionIdCounter: number = 0;\r\n    private addSubscriptions: IStringDictionary<() => void> = {};\r\n    private removeSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private disposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.list = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.list.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Get = (itemIndex: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.list[itemIndex];\r\n    }\r\n\r\n    public First = (): TItem => {\r\n        return this.Get(0);\r\n    }\r\n\r\n    public Last = (): TItem => {\r\n        return this.Get(this.Length() - 1);\r\n    }\r\n\r\n    public Add = (item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        this.InsertAt(this.list.length, item);\r\n    }\r\n\r\n    public InsertAt = (index: number, item: TItem): void => {\r\n        this.ThrowIfDisposed();\r\n        if (index === 0) {\r\n            this.list.unshift(item);\r\n        } else if (index === this.list.length) {\r\n            this.list.push(item);\r\n        } else {\r\n            this.list.splice(index, 0, item);\r\n        }\r\n        this.TriggerSubscriptions(this.addSubscriptions);\r\n    }\r\n\r\n    public RemoveFirst = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(0);\r\n    }\r\n\r\n    public RemoveLast = (): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.RemoveAt(this.Length() - 1);\r\n    }\r\n\r\n    public RemoveAt = (index: number): TItem => {\r\n        this.ThrowIfDisposed();\r\n        return this.Remove(index, 1)[0];\r\n    }\r\n\r\n    public Remove = (index: number, count: number): TItem[] => {\r\n        this.ThrowIfDisposed();\r\n        const removedElements = this.list.splice(index, count);\r\n        this.TriggerSubscriptions(this.removeSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public Clear = (): void => {\r\n        this.ThrowIfDisposed();\r\n        this.Remove(0, this.Length());\r\n    }\r\n\r\n    public Length = (): number => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.length;\r\n    }\r\n\r\n    public OnAdded = (addedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.addSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.addSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.removeSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.removeSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public OnDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.ThrowIfDisposed();\r\n        const subscriptionId = this.subscriptionIdCounter++;\r\n\r\n        this.disposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            Detach: () => {\r\n                delete this.disposedSubscriptions[subscriptionId];\r\n            },\r\n        };\r\n    }\r\n\r\n    public Join = (seperator?: string): string => {\r\n        this.ThrowIfDisposed();\r\n        return this.list.join(seperator);\r\n    }\r\n\r\n    public ToArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.list.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        if (callback) {\r\n            return this.Where(callback).Length() > 0;\r\n        } else {\r\n            return this.Length() > 0;\r\n        }\r\n    }\r\n\r\n    public All = (callback: (item: TItem) => boolean): boolean => {\r\n        this.ThrowIfDisposed();\r\n        return this.Where(callback).Length() === this.Length();\r\n    }\r\n\r\n    public ForEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.ThrowIfDisposed();\r\n        for (let i = 0; i < this.Length(); i++) {\r\n            callback(this.list[i], i);\r\n        }\r\n    }\r\n\r\n    public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.ThrowIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            selectList.push(callback(this.list[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            if (callback(this.list[i], i)) {\r\n                filteredList.Add(this.list[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        const clonedArray = this.ToArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public Clone = (): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.ToArray());\r\n    }\r\n\r\n    public Concat = (list: List<TItem>): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(list.ToArray()));\r\n    }\r\n\r\n    public ConcatArray = (array: TItem[]): List<TItem> => {\r\n        this.ThrowIfDisposed();\r\n        return new List<TItem>(this.list.concat(array));\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.list == null;\r\n    }\r\n\r\n    public Dispose = (reason?: string): void => {\r\n        if (!this.IsDisposed()) {\r\n            this.disposeReason = reason;\r\n            this.list = null;\r\n            this.addSubscriptions = null;\r\n            this.removeSubscriptions = null;\r\n            this.TriggerSubscriptions(this.disposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private ThrowIfDisposed = (): void => {\r\n        if (this.IsDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.disposeReason);\r\n        }\r\n    }\r\n\r\n    private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ArgumentNullError } from \"./Error\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\r\n\r\nexport class InMemoryStorage implements IKeyValueStorage {\r\n\r\n    private store: IStringDictionary<string> = {};\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return this.store[key];\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        if (this.store[key] === undefined) {\r\n            this.store[key] = valueToAdd;\r\n        }\r\n\r\n        return this.store[key];\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        this.store[key] = value;\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        if (this.store[key] !== undefined) {\r\n            delete this.store[key];\r\n        }\r\n    }\r\n}\r\n","import { ObjectDisposedError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private eventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private metadata: IStringDictionary<string>;\r\n    private isDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.metadata = metadata;\r\n    }\r\n\r\n    public OnEvent = (event: TEvent): void => {\r\n        if (this.IsDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.Metadata) {\r\n            for (const paramName in this.Metadata) {\r\n                if (paramName) {\r\n                    if (event.Metadata) {\r\n                        if (!event.Metadata[paramName]) {\r\n                            event.Metadata[paramName] = this.Metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.eventListeners) {\r\n            if (eventId && this.eventListeners[eventId]) {\r\n                this.eventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public Attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = CreateNoDashGuid();\r\n        this.eventListeners[id] = onEventCallback;\r\n        return {\r\n            Detach: () => {\r\n                delete this.eventListeners[id];\r\n            },\r\n        };\r\n    }\r\n\r\n    public AttachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.Attach(listener.OnEvent);\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.eventListeners = null;\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    public get Metadata(): IStringDictionary<string> {\r\n        return this.metadata;\r\n    }\r\n}\r\n","import { InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private messageType: MessageType;\r\n    private headers: IStringDictionary<string>;\r\n    private body: any = null;\r\n\r\n    private id: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.messageType = messageType;\r\n        this.body = body;\r\n        this.headers = headers ? headers : {};\r\n        this.id = id ? id : CreateNoDashGuid();\r\n    }\r\n\r\n    public get MessageType(): MessageType {\r\n        return this.messageType;\r\n    }\r\n\r\n    public get Headers(): any {\r\n        return this.headers;\r\n    }\r\n\r\n    public get Body(): any {\r\n        return this.body;\r\n    }\r\n\r\n    public get TextBody(): string {\r\n        if (this.messageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.body as string;\r\n    }\r\n\r\n    public get BinaryBody(): ArrayBuffer {\r\n        if (this.messageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.body;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n}\r\n","export const log = (message?: any, ... optionalParams: any[]) => {\n    if (typeof(window) !== 'undefined' && (window as any)[\"botchatDebug\"] && message)\n        console.log(message, ... optionalParams);\n}\n","import { Speech, Action } from '../SpeechModule'\nimport * as konsole from '../Konsole';\n\nexport interface ICognitiveServicesSpeechSynthesisProperties {\n    subscriptionKey?: string,\n    gender?: SynthesisGender,\n    voiceName?: string,\n    fetchCallback?: (authFetchEventId: string) => Promise<string>,\n    fetchOnExpiryCallback?: (authFetchEventId: string) => Promise<string>\n}\n\nexport enum SynthesisGender { Male, Female };\n\ninterface SpeakRequest {\n    isReadyToPlay: boolean,\n    data: ArrayBuffer,\n    text: string,\n    locale: string,\n    onSpeakingStarted: Action,\n    onSpeakingFinished: Action,\n}\n\ninterface HttpHeader {\n    name: string,\n    value: string\n}\n\nexport class SpeechSynthesizer implements Speech.ISpeechSynthesizer {\n    private _requestQueue: SpeakRequest[] = null;\n    private _isPlaying: boolean = false;\n    private _audioElement: AudioContext;\n    private _helper: CognitiveServicesHelper;\n    private _properties: ICognitiveServicesSpeechSynthesisProperties;\n\n    constructor(properties: ICognitiveServicesSpeechSynthesisProperties) {\n        this._helper = new CognitiveServicesHelper(properties);\n        this._properties = properties;\n        this._requestQueue = new Array();\n    }\n\n    speak(text: string, lang: string, onSpeakingStarted: Action = null, onSpeakingFinished: Action = null): void {\n        this._requestQueue.push(\n            {\n                isReadyToPlay: false,\n                data: null,\n                text: text,\n                locale: lang,\n                onSpeakingStarted: onSpeakingStarted,\n                onSpeakingFinished: onSpeakingFinished\n            }\n        );\n        this.getSpeechData().then(() => {\n            this.playAudio();\n        });\n    }\n\n    stopSpeaking(): void {\n        if (this._isPlaying) {\n            this._requestQueue = [];\n            this._isPlaying = false;\n            if (this._audioElement && this._audioElement.state !== \"closed\") {\n                this._audioElement.close();\n            }\n        }\n    }\n\n    private playAudio() {\n        if (this._requestQueue.length == 0) {\n            return;\n        }\n        const top = this._requestQueue[0];\n        if (!top) {\n            return;\n        }\n        if (!top.isReadyToPlay) {\n            window.setTimeout(() => this.playAudio(), 100);\n            return;\n        }\n        if (!this._isPlaying) {\n            this._isPlaying = true;\n            if (!this._audioElement || this._audioElement.state === \"closed\") {\n                this._audioElement = new AudioContext();\n            }\n            this._audioElement.decodeAudioData(top.data, (buffer) => {\n                const source = this._audioElement.createBufferSource();\n                source.buffer = buffer;\n                source.connect(this._audioElement.destination);\n                if (top.onSpeakingStarted) {\n                    top.onSpeakingStarted();\n                }\n                source.start(0);\n                source.onended = (event) => {\n                    this._isPlaying = false;\n                    if (top.onSpeakingFinished) {\n                        top.onSpeakingFinished();\n                    }\n                    this._requestQueue = this._requestQueue.slice(1, this._requestQueue.length);\n                    if (this._requestQueue.length > 0) {\n                        this.playAudio();\n                    }\n                }\n            }, (ex) => {\n                this.log(ex.message);\n                this._isPlaying = false;\n                this._requestQueue = this._requestQueue.slice(1, this._requestQueue.length);\n                if (this._requestQueue.length > 0) {\n                    this.playAudio();\n                }\n            });\n        }\n    }\n\n    private getSpeechData(): Promise<any> {\n        if (this._requestQueue.length == 0) {\n            return;\n        }\n        const latest = this._requestQueue[this._requestQueue.length - 1];\n        return this._helper.fetchSpeechData(latest.text, latest.locale, this._properties).then((result) => {\n            latest.data = result;\n            latest.isReadyToPlay = true;\n        }, (ex) => {\n            // Failed to get the speech data, ignore this item\n            this.log(ex);\n            this._requestQueue = this._requestQueue.slice(0, this._requestQueue.length - 1);\n        });\n    }\n\n    private log(message: string) {\n        konsole.log('CognitiveServicesSpeechSynthesis: ' + message);\n    }\n}\n\nclass CognitiveServicesHelper {\n    private readonly _tokenURL = \"https://api.cognitive.microsoft.com/sts/v1.0/issueToken\";\n    private readonly _synthesisURL = \"https://speech.platform.bing.com/synthesize\";\n    private readonly _outputFormat = \"riff-16khz-16bit-mono-pcm\";\n    private _tokenCallback: (id: string) => Promise<string>;\n    private _tokenExpiredCallback: (id: string) => Promise<string>;\n    private _lastTokenTime: number;\n\n    constructor(props: ICognitiveServicesSpeechSynthesisProperties) {\n        if (props.subscriptionKey) {\n            this._tokenCallback = (id: string) => this.fetchSpeechToken(id);\n            this._tokenExpiredCallback = (id: string) => this.fetchSpeechToken(id);\n        }\n        else if (props.fetchCallback && props.fetchOnExpiryCallback) {\n            this._tokenCallback = props.fetchCallback;\n            this._tokenExpiredCallback = props.fetchOnExpiryCallback;\n        }\n        else {\n            throw 'Error: The CognitiveServicesSpeechSynthesis requires either a subscriptionKey or a fetchCallback and a fetchOnExpiryCallback.';\n        }\n    }\n\n    public fetchSpeechData(text: string, locale: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): Promise<any> {\n        const SSML = this.makeSSML(text, locale, synthesisProperties);\n        const cbAfterToken = (token: string) => {\n            this._lastTokenTime = Date.now();\n\n            const optionalHeaders = [{ name: \"Content-type\", value: 'application/ssml+xml' },\n            { name: \"X-Microsoft-OutputFormat\", value: this._outputFormat },\n            { name: \"Authorization\", value: token }];\n\n            return this.makeHttpCall(\"POST\", this._synthesisURL, true, optionalHeaders, SSML);\n        };\n\n        if (Date.now() - this._lastTokenTime > 500000) {\n            return this._tokenExpiredCallback(synthesisProperties.subscriptionKey).then(token => cbAfterToken(token));\n        }\n        else {\n            return this._tokenCallback(synthesisProperties.subscriptionKey).then(token => cbAfterToken(token));\n        }\n    }\n\n    private makeSSML(text: string, locale: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): string {\n        if (text.indexOf(\"<speak\") === 0) {\n            return this.processSSML(text, synthesisProperties);\n        }\n        else {\n            let ssml = \"<speak version='1.0' xml:lang='\" + locale + \"'><voice xml:lang='\" + locale + \"' xml:gender='\" + (synthesisProperties && synthesisProperties.gender ? SynthesisGender[synthesisProperties.gender] : \"Female\") + \"' name='\";\n            if (synthesisProperties.voiceName) {\n                ssml += synthesisProperties.voiceName;\n            }\n            else if (synthesisProperties.gender !== null && synthesisProperties.gender !== undefined) {\n                ssml += this.fetchVoiceName(locale, synthesisProperties.gender);\n            }\n            else {\n                ssml += this.fetchVoiceName(locale, SynthesisGender.Female);\n            }\n            return ssml + \"'>\" + this.encodeHTML(text) + \"</voice></speak>\";\n        }\n    }\n\n    private processSSML(ssml: string, synthesisProperties: ICognitiveServicesSpeechSynthesisProperties): string {\n        let processDone: boolean = false;\n\n        // Extract locale info from ssml\n        let locale: string;\n        const match = /xml:lang=['\"](\\w\\w-\\w\\w)['\"]/.exec(ssml);\n        if (match) {\n            locale = match[1];\n        }\n        else {\n            locale = \"en-us\";\n        }\n\n        // Extract gender from properties\n        let gender = synthesisProperties && synthesisProperties.gender;\n        if (gender === null || gender === undefined) {\n            gender = SynthesisGender.Female;\n        }\n        const parser = new DOMParser();\n        const dom = parser.parseFromString(ssml, 'text/xml');\n        const nodes = dom.documentElement.childNodes;\n\n        // Check if there is a voice node\n        for (let i = 0; i < nodes.length; ++i) {\n            if (nodes[i].nodeName === \"voice\") {\n                // Check if there is a name attribute on voice element\n                for (let j = 0; j < nodes[i].attributes.length; ++j) {\n                    if (nodes[i].attributes[j].nodeName === \"name\") {\n                        // Name attribute is found on voice element, use it directly\n                        processDone = true;\n                        break;\n                    }\n\n                    // Find the gender info from voice element, this will override what is in the properties\n                    if (nodes[i].attributes[j].nodeName === \"xml:gender\") {\n                        gender = nodes[i].attributes[j].nodeValue.toLowerCase() === 'male' ? SynthesisGender.Male : SynthesisGender.Female;\n                    }\n                }\n\n                if (!processDone) {\n                    // Otherwise add the name attribute based on locale and gender\n                    const attribute = dom.createAttribute(\"name\");\n                    attribute.value = (synthesisProperties && synthesisProperties.voiceName) || this.fetchVoiceName(locale, gender);\n                    nodes[i].attributes.setNamedItem(attribute);\n                    processDone = true;\n                }\n                break;\n            }\n        }\n        const serializer = new XMLSerializer();\n        if (!processDone) {\n            // There is no voice element, add one based on locale\n            const voiceNode = dom.createElement(\"voice\") as Node;\n            const attribute = dom.createAttribute(\"name\");\n            attribute.value = (synthesisProperties && synthesisProperties.voiceName) || this.fetchVoiceName(locale, gender);\n            voiceNode.attributes.setNamedItem(attribute);\n            while (nodes.length > 0) {\n                voiceNode.appendChild(dom.documentElement.firstChild);\n            }\n            dom.documentElement.appendChild(voiceNode);\n        }\n        return serializer.serializeToString(dom);\n    }\n\n    private encodeHTML(text: string): string {\n        return text.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;');\n    }\n\n    private fetchSpeechToken(apiKey: string): Promise<string> {\n        const optionalHeaders: HttpHeader[] = [{ name: \"Ocp-Apim-Subscription-Key\", value: apiKey },\n        // required for Firefox otherwise a CORS error is raised\n        { name: \"Access-Control-Allow-Origin\", value: \"*\" }];\n        return this.makeHttpCall(\"POST\", this._tokenURL, false, optionalHeaders).then((text) => {\n            konsole.log(\"New authentication token generated.\");\n            return Promise.resolve(text);\n        }, (ex) => {\n            const reason = \"Failed to generate authentication token\";\n            konsole.log(reason);\n            return Promise.reject(reason);\n        });\n    }\n\n    private makeHttpCall(actionType: string, url: string, isArrayBuffer: boolean = false, optionalHeaders?: HttpHeader[], dataToSend?: any): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            if (isArrayBuffer) {\n                xhr.responseType = 'arraybuffer';\n            }\n            xhr.onreadystatechange = function (event) {\n                if (xhr.readyState !== 4) return;\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    if (!isArrayBuffer) {\n                        resolve(xhr.responseText);\n                    }\n                    else {\n                        resolve(xhr.response);\n                    }\n                } else {\n                    reject(xhr.status);\n                }\n            };\n            try {\n                xhr.open(actionType, url, true);\n                if (optionalHeaders) {\n                    optionalHeaders.forEach((header) => {\n                        xhr.setRequestHeader(header.name, header.value);\n                    });\n                }\n                if (dataToSend) {\n                    xhr.send(dataToSend);\n                }\n                else {\n                    xhr.send();\n                }\n            }\n            catch (ex) {\n                reject(ex)\n            }\n        });\n    }\n\n    private fetchVoiceName(locale: string, gender: SynthesisGender): string {\n        let voiceName: string;\n        const localeLowerCase = locale.toLowerCase();\n        if (gender === SynthesisGender.Female) {\n            voiceName = this._femaleVoiceMap[localeLowerCase] || this._femaleVoiceMap[\"en-us\"];\n        }\n        else {\n            voiceName = this._maleVoiceMap[localeLowerCase] || this._maleVoiceMap[\"en-us\"];\n        }\n        return voiceName;\n    }\n\n    // source: https://docs.microsoft.com/en-us/azure/cognitive-services/speech/api-reference-rest/bingvoiceoutput\n    private readonly _femaleVoiceMap: { [key: string]: string } = {\n        \"ar-eg\": \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\n        \"ca-es\": \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\n        \"da-dk\": \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\n        \"de-de\": \"Microsoft Server Speech Text to Speech Voice (de-DE, Hedda)\",\n        \"en-au\": \"Microsoft Server Speech Text to Speech Voice (en-AU, Catherine)\",\n        \"en-ca\": \"Microsoft Server Speech Text to Speech Voice (en-CA, Linda)\",\n        \"en-gb\": \"Microsoft Server Speech Text to Speech Voice (en-GB, Susan, Apollo)\",\n        \"en-in\": \"Microsoft Server Speech Text to Speech Voice (en-IN, Heera, Apollo)\",\n        \"en-us\": \"Microsoft Server Speech Text to Speech Voice (en-US, ZiraRUS)\",\n        \"es-es\": \"Microsoft Server Speech Text to Speech Voice (es-ES, Laura, Apollo)\",\n        \"es-mx\": \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\n        \"fi-fi\": \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\n        \"fr-ca\": \"Microsoft Server Speech Text to Speech Voice (fr-CA, Caroline)\",\n        \"fr-fr\": \"Microsoft Server Speech Text to Speech Voice (fr-FR, Julie, Apollo)\",\n        \"hi-in\": \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana, Apollo)\",\n        \"ja-jp\": \"Microsoft Server Speech Text to Speech Voice (ja-JP, Ayumi, Apollo)\",\n        \"ko-kr\": \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\n        \"nb-no\": \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\n        \"nl-nl\": \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\n        \"pl-pl\": \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\n        \"pt-br\": \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\n        \"pt-pt\": \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\n        \"ru-ru\": \"Microsoft Server Speech Text to Speech Voice (ru-RU, Irina, Apollo)\",\n        \"sv-se\": \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\n        \"tr-tr\": \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\n        \"zh-cn\": \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\n        \"zh-hk\": \"Microsoft Server Speech Text to Speech Voice (zh-HK, Tracy, Apollo)\",\n        \"zh-tw\": \"Microsoft Server Speech Text to Speech Voice (zh-TW, Yating, Apollo)\"\n    };\n\n    private readonly _maleVoiceMap: { [key: string]: string } = {\n        \"ar-sa\": \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\n        \"cs-cz\": \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Vit)\",\n        \"de-at\": \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\n        \"de-ch\": \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\n        \"de-de\": \"Microsoft Server Speech Text to Speech Voice (de-DE, Stefan, Apollo)\",\n        \"el-gr\": \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\n        \"en-gb\": \"Microsoft Server Speech Text to Speech Voice (en-GB, George, Apollo)\",\n        \"en-ie\": \"Microsoft Server Speech Text to Speech Voice (en-IE, Shaun)\",\n        \"en-in\": \"Microsoft Server Speech Text to Speech Voice (en-IN, Ravi, Apollo)\",\n        \"en-us\": \"Microsoft Server Speech Text to Speech Voice (en-US, BenjaminRUS)\",\n        \"es-es\": \"Microsoft Server Speech Text to Speech Voice (es-ES, Pablo, Apollo)\",\n        \"es-mx\": \"Microsoft Server Speech Text to Speech Voice (es-MX, Raul, Apollo)\",\n        \"fr-ch\": \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\n        \"fr-fr\": \"Microsoft Server Speech Text to Speech Voice (fr-FR, Paul, Apollo)\",\n        \"he-il\": \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\n        \"hi-in\": \"Microsoft Server Speech Text to Speech Voice (hi-IN, Hemant)\",\n        \"hu-hu\": \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\n        \"id-id\": \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\n        \"it-it\": \"Microsoft Server Speech Text to Speech Voice (it-IT, Cosimo, Apollo)\",\n        \"ja-jp\": \"Microsoft Server Speech Text to Speech Voice (ja-JP, Ichiro, Apollo)\",\n        \"pt-br\": \"Microsoft Server Speech Text to Speech Voice (pt-BR, Daniel, Apollo)\",\n        \"ro-ro\": \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\n        \"ru-ru\": \"Microsoft Server Speech Text to Speech Voice (ru-RU, Pavel, Apollo)\",\n        \"sk-sk\": \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\n        \"th-th\": \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\n        \"zh-cn\": \"Microsoft Server Speech Text to Speech Voice (zh-CN, Kangkang, Apollo)\",\n        \"zh-hk\": \"Microsoft Server Speech Text to Speech Voice (zh-HK, Danny, Apollo)\",\n        \"zh-tw\": \"Microsoft Server Speech Text to Speech Voice (zh-TW, Zhiwei, Apollo)\"\n    };\n}\n","import { MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\r\nimport { IAudioSource, Promise, Storage } from \"../../common/Exports\";\r\nimport { IAuthentication, Recognizer, RecognizerConfig } from \"../speech/Exports\";\r\nimport { SpeechConnectionFactory } from \"./SpeechConnectionFactory\";\r\n\r\nconst CreateRecognizer = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Recognizer => {\r\n    return CreateRecognizerWithPcmRecorder(\r\n        recognizerConfig,\r\n        authentication);\r\n};\r\n\r\nconst CreateRecognizerWithPcmRecorder = (recognizerConfig: RecognizerConfig, authentication: IAuthentication): Recognizer => {\r\n    return CreateRecognizerWithCustomAudioSource(\r\n        recognizerConfig,\r\n        authentication,\r\n        new MicAudioSource(new PcmRecorder()));\r\n};\r\n\r\nconst CreateRecognizerWithCustomAudioSource = (recognizerConfig: RecognizerConfig, authentication: IAuthentication, audioSource: IAudioSource): Recognizer =>  {\r\n    return new Recognizer (\r\n        authentication,\r\n        new SpeechConnectionFactory(),\r\n        audioSource,\r\n        recognizerConfig);\r\n};\r\n\r\nexport { CreateRecognizer, CreateRecognizerWithPcmRecorder,  CreateRecognizerWithCustomAudioSource };\r\n","\r\nexport * from \"./Recognizer\";\r\nexport * from \"./SpeechConnectionFactory\";\r\n","import {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Promise,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public ToConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.MessageType === MessageType.Text) {\r\n                const textMessage: string = message.TextContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.ParseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n            } else if (message.MessageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.BinaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.ParseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.Resolve(new ConnectionMessage(message.MessageType, body, headers, message.Id));\r\n            }\r\n        } catch (e) {\r\n            deferral.Reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.Promise();\r\n    }\r\n\r\n    public FromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.MessageType === MessageType.Text) {\r\n                const payload = `${this.MakeHeaders(message)}${CRLF}${message.TextBody ? message.TextBody : \"\"}`;\r\n\r\n                deferral.Resolve(new RawWebsocketMessage(MessageType.Text, payload, message.Id));\r\n\r\n            } else if (message.MessageType === MessageType.Binary) {\r\n                const headersString = this.MakeHeaders(message);\r\n                const content = message.BinaryBody;\r\n\r\n                const fr = new FileReader();\r\n\r\n                fr.onload = () => {\r\n                    const headerInt8Array = new Int8Array(fr.result);\r\n\r\n                    const payload = new ArrayBuffer(2 + headerInt8Array.byteLength + (content ? content.byteLength : 0));\r\n                    const dataView = new DataView(payload);\r\n\r\n                    dataView.setInt16(0, headerInt8Array.length);\r\n\r\n                    for (let i = 0; i < headerInt8Array.byteLength; i++) {\r\n                        dataView.setInt8(2 + i, headerInt8Array[i]);\r\n                    }\r\n\r\n                    if (content) {\r\n                        const bodyInt8Array = new Int8Array(content);\r\n                        for (let i = 0; i < bodyInt8Array.byteLength; i++) {\r\n                            dataView.setInt8(2 + headerInt8Array.byteLength + i, bodyInt8Array[i]);\r\n                        }\r\n                    }\r\n\r\n                    deferral.Resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.Id));\r\n                };\r\n\r\n                fr.onerror = () => {\r\n                    deferral.Reject(\"failed to load headers into file reader\");\r\n                };\r\n\r\n                fr.readAsArrayBuffer(new Blob([headersString]));\r\n            }\r\n        } catch (e) {\r\n            deferral.Reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.Promise();\r\n    }\r\n\r\n    private MakeHeaders = (message: ConnectionMessage): string => {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.Headers) {\r\n            for (const header in message.Headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.Headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private ParseHeaders = (headersString: string): IStringDictionary<string> => {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const seperatorIndex = header.indexOf(\":\");\r\n                        const headerName = seperatorIndex > 0 ? header.substr(0, seperatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            seperatorIndex > 0 && header.length > (seperatorIndex + 1) ?\r\n                                header.substr(seperatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n}\r\n","\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n}\r\n\r\nexport interface ISpeechStartDetectedResult {\r\n    Offset?: number;\r\n}\r\n\r\nexport interface ISpeechHypothesisResult {\r\n    Text: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n}\r\n\r\nexport interface ISpeechEndDetectedResult {\r\n    Offset?: number;\r\n}\r\n\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Duration?: number;\r\n    Offset?: number;\r\n}\r\n\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n}\r\n","import {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    IStringDictionary,\r\n    MessageType,\r\n} from \"../../common/Exports\";\r\n\r\nconst PathHeaderName: string = \"path\";\r\nconst ContentTypeHeaderName: string = \"content-type\";\r\nconst RequestIdHeaderName: string = \"x-requestid\";\r\nconst RequestTimestampHeaderName: string = \"x-timestamp\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private path: string;\r\n    private requestId: string;\r\n    private contentType: string;\r\n    private additionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[PathHeaderName] = path;\r\n        headers[RequestIdHeaderName] = requestId;\r\n        headers[RequestTimestampHeaderName] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[ContentTypeHeaderName] = contentType;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.path = path;\r\n        this.requestId = requestId;\r\n        this.contentType = contentType;\r\n        this.additionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get Path(): string {\r\n        return this.path;\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get ContentType(): string {\r\n        return this.contentType;\r\n    }\r\n\r\n    public get AdditionalHeaders(): IStringDictionary<string> {\r\n        return this.additionalHeaders;\r\n    }\r\n\r\n    public static FromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.Headers) {\r\n            for (const headerName in message.Headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === PathHeaderName.toLowerCase()) {\r\n                        path = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestIdHeaderName.toLowerCase()) {\r\n                        requestId = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === RequestTimestampHeaderName.toLowerCase()) {\r\n                        requestTimestamp = message.Headers[headerName];\r\n                    } else if (headerName.toLowerCase() === ContentTypeHeaderName.toLowerCase()) {\r\n                        contentType = message.Headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.Headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.MessageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.Body,\r\n            additionalHeaders,\r\n            message.Id);\r\n    }\r\n}\r\n","import {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    RecognitionTriggeredEvent,\r\n} from \"./RecognitionEvents\";\r\n\r\ninterface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\ninterface IMetric {\r\n    End: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name: string;\r\n    Start: string;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private isDisposed: boolean = false;\r\n\r\n    private requestId: string;\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n\r\n    private listeningTriggerMetric: IMetric = null;\r\n    private micMetric: IMetric = null;\r\n    private connectionEstablishMetric: IMetric = null;\r\n\r\n    private micStartTime: string;\r\n\r\n    private connectionId: string;\r\n    private connectionStartTime: string;\r\n\r\n    private receivedMessages: IStringDictionary<string[]>;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.requestId = requestId;\r\n        this.audioSourceId = audioSourceId;\r\n        this.audioNodeId = audioNodeId;\r\n\r\n        this.receivedMessages = {};\r\n    }\r\n\r\n    public OnEvent = (e: PlatformEvent): void => {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.RequestId === this.requestId) {\r\n            this.listeningTriggerMetric = {\r\n                End: e.EventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.EventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            this.micStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            this.micStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.AudioSourceId === this.audioSourceId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Error: e.Error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Error: e.Error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\r\n            if (!this.micMetric) {\r\n                this.micMetric = {\r\n                    End: e.EventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.micStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.RequestId === this.requestId) {\r\n            this.connectionId = e.ConnectionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.ConnectionId === this.connectionId) {\r\n            this.connectionStartTime = e.EventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.ConnectionId === this.connectionId) {\r\n            if (!this.connectionEstablishMetric) {\r\n                this.connectionEstablishMetric = {\r\n                    End: e.EventTime,\r\n                    Id: this.connectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.connectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.ConnectionId === this.connectionId) {\r\n            if (!this.connectionEstablishMetric) {\r\n                this.connectionEstablishMetric = {\r\n                    End: e.EventTime,\r\n                    Error: this.GetConnectionError(e.StatusCode),\r\n                    Id: this.connectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.connectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.ConnectionId === this.connectionId) {\r\n            if (e.Message && e.Message.Headers && e.Message.Headers.path) {\r\n                if (!this.receivedMessages[e.Message.Headers.path]) {\r\n                    this.receivedMessages[e.Message.Headers.path] = new Array<string>();\r\n                }\r\n\r\n                this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    public GetTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.listeningTriggerMetric) {\r\n            metrics.push(this.listeningTriggerMetric);\r\n        }\r\n\r\n        if (this.micMetric) {\r\n            metrics.push(this.micMetric);\r\n        }\r\n\r\n        if (this.connectionEstablishMetric) {\r\n            metrics.push(this.connectionEstablishMetric);\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.receivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.receivedMessages = {};\r\n        this.listeningTriggerMetric = null;\r\n        this.micMetric = null;\r\n        this.connectionEstablishMetric = null;\r\n\r\n        return json;\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    private GetConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","import {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDetachable,\r\n    IEventSource,\r\n    IStreamChunk,\r\n    MessageType,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n} from \"../../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionCompletionStatus,\r\n    RecognitionEndedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechDetailedPhraseEvent,\r\n    SpeechEndDetectedEvent,\r\n    SpeechHypothesisEvent,\r\n    SpeechRecognitionEvent,\r\n    SpeechRecognitionResultEvent,\r\n    SpeechSimplePhraseEvent,\r\n    SpeechStartDetectedEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { RecognitionMode, RecognizerConfig, SpeechResultFormat } from \"./RecognizerConfig\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\nimport {\r\n    IDetailedSpeechPhrase,\r\n    ISimpleSpeechPhrase,\r\n    ISpeechEndDetectedResult,\r\n    ISpeechHypothesisResult,\r\n    ISpeechStartDetectedResult,\r\n} from \"./SpeechResults\";\r\n\r\nexport class Recognizer {\r\n    private authentication: IAuthentication;\r\n    private connectionFactory: IConnectionFactory;\r\n    private audioSource: IAudioSource;\r\n    private recognizerConfig: RecognizerConfig;\r\n    private speechConfigConnectionId: string;\r\n    private connectionFetchPromise: Promise<IConnection>;\r\n    private connectionId: string;\r\n    private authFetchEventId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.authentication = authentication;\r\n        this.connectionFactory = connectionFactory;\r\n        this.audioSource = audioSource;\r\n        this.recognizerConfig = recognizerConfig;\r\n    }\r\n\r\n    public get AudioSource(): IAudioSource {\r\n        return this.audioSource;\r\n    }\r\n\r\n    public Recognize = (onEventCallback: (event: SpeechRecognitionEvent) => void, speechContextJson?: string): Promise<boolean> => {\r\n        const requestSession = new RequestSession(this.audioSource.Id(), onEventCallback);\r\n        requestSession.ListenForServiceTelemetry(this.audioSource.Events);\r\n\r\n        return this.audioSource\r\n            .Attach(requestSession.AudioNodeId)\r\n            .ContinueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\r\n                if (result.IsError) {\r\n                    requestSession.OnAudioSourceAttachCompleted(null, true, result.Error);\r\n                    throw new Error(result.Error);\r\n                } else {\r\n                    requestSession.OnAudioSourceAttachCompleted(result.Result, false);\r\n                }\r\n\r\n                const audioNode = result.Result;\r\n\r\n                this.FetchConnection(requestSession)\r\n                    .OnSuccessContinueWith((connection: IConnection) => {\r\n                        const messageRetrievalPromise = this.ReceiveMessage(connection, requestSession);\r\n                        const messageSendPromise = this.SendSpeechConfig(requestSession.RequestId, connection, this.recognizerConfig.SpeechConfig.Serialize())\r\n                            .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                return this.SendSpeechContext(requestSession.RequestId, connection, speechContextJson)\r\n                                    .OnSuccessContinueWithPromise((_: boolean) => {\r\n                                        return this.SendAudio(requestSession.RequestId, connection, audioNode, requestSession);\r\n                                    });\r\n                            });\r\n\r\n                        const completionPromise = PromiseHelper.WhenAll([messageRetrievalPromise, messageSendPromise]);\r\n\r\n                        completionPromise.On((r: boolean) => {\r\n                            requestSession.Dispose();\r\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                        }, (error: string) => {\r\n                            requestSession.Dispose(error);\r\n                            this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                        });\r\n\r\n                        return completionPromise;\r\n                    });\r\n\r\n                return requestSession.CompletionPromise;\r\n            });\r\n    }\r\n\r\n    private FetchConnection = (requestSession: RequestSession, isUnAuthorized: boolean = false): Promise<IConnection> => {\r\n        if (this.connectionFetchPromise) {\r\n            if (this.connectionFetchPromise.Result().IsError\r\n                || this.connectionFetchPromise.Result().Result.State() === ConnectionState.Disconnected) {\r\n                this.connectionId = null;\r\n                this.connectionFetchPromise = null;\r\n                return this.FetchConnection(requestSession);\r\n            } else {\r\n                requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n                requestSession.OnConnectionEstablishCompleted(200);\r\n                requestSession.ListenForServiceTelemetry(this.connectionFetchPromise.Result().Result.Events);\r\n                return this.connectionFetchPromise;\r\n            }\r\n        }\r\n\r\n        this.authFetchEventId = CreateNoDashGuid();\r\n        this.connectionId = CreateNoDashGuid();\r\n\r\n        requestSession.OnPreConnectionStart(this.authFetchEventId, this.connectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.authentication.FetchOnExpiry(this.authFetchEventId) : this.authentication.Fetch(this.authFetchEventId);\r\n\r\n        this.connectionFetchPromise = authPromise\r\n            .ContinueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.IsError) {\r\n                    requestSession.OnAuthCompleted(true, result.Error);\r\n                    throw new Error(result.Error);\r\n                } else {\r\n                    requestSession.OnAuthCompleted(false);\r\n                }\r\n\r\n                const connection = this.connectionFactory.Create(this.recognizerConfig, result.Result, this.connectionId);\r\n                requestSession.ListenForServiceTelemetry(connection.Events);\r\n\r\n                return connection.Open().OnSuccessContinueWithPromise((response: ConnectionOpenResponse) => {\r\n                    if (response.StatusCode === 200) {\r\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode);\r\n                        return PromiseHelper.FromResult(connection);\r\n                    } else if (response.StatusCode === 403 && !isUnAuthorized) {\r\n                        return this.FetchConnection(requestSession, true);\r\n                    } else {\r\n                        requestSession.OnConnectionEstablishCompleted(response.StatusCode, response.Reason);\r\n                        return PromiseHelper.FromError<IConnection>(`Unable to contact server. StatusCode: ${response.StatusCode}, Reason: ${response.Reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        return this.connectionFetchPromise;\r\n    }\r\n\r\n    private ReceiveMessage = (connection: IConnection, requestSession: RequestSession): Promise<boolean> => {\r\n        return connection\r\n            .Read()\r\n            .OnSuccessContinueWithPromise((message: ConnectionMessage) => {\r\n                const connectionMessage = SpeechConnectionMessage.FromConnectionMessage(message);\r\n                if (connectionMessage.RequestId.toLowerCase() === requestSession.RequestId.toLowerCase()) {\r\n                    switch (connectionMessage.Path.toLowerCase()) {\r\n                        case \"turn.start\":\r\n                            requestSession.OnServiceTurnStartResponse(JSON.parse(connectionMessage.TextBody));\r\n                            break;\r\n                        case \"speech.startDetected\":\r\n                            requestSession.OnServiceSpeechStartDetectedResponse(JSON.parse(connectionMessage.TextBody));\r\n                            break;\r\n                        case \"speech.hypothesis\":\r\n                            requestSession.OnServiceSpeechHypothesisResponse(JSON.parse(connectionMessage.TextBody));\r\n                            break;\r\n                        case \"speech.enddetected\":\r\n                            requestSession.OnServiceSpeechEndDetectedResponse(JSON.parse(connectionMessage.TextBody));\r\n                            break;\r\n                        case \"speech.phrase\":\r\n                            if (this.recognizerConfig.IsContinuousRecognition) {\r\n                                // For continuous recognition telemetry has to be sent for every phrase as per spec.\r\n                                this.SendTelemetryData(requestSession.RequestId, connection, requestSession.GetTelemetry());\r\n                            }\r\n                            if (this.recognizerConfig.Format === SpeechResultFormat.Simple) {\r\n                                requestSession.OnServiceSimpleSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                            } else {\r\n                                requestSession.OnServiceDetailedSpeechPhraseResponse(JSON.parse(connectionMessage.TextBody));\r\n                            }\r\n                            break;\r\n                        case \"turn.end\":\r\n                            requestSession.OnServiceTurnEndResponse();\r\n                            return PromiseHelper.FromResult(true);\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                return this.ReceiveMessage(connection, requestSession);\r\n            });\r\n    }\r\n\r\n    private SendSpeechConfig = (requestId: string, connection: IConnection, speechConfigJson: string) => {\r\n        if (speechConfigJson && this.connectionId !== this.speechConfigConnectionId) {\r\n            this.speechConfigConnectionId = this.connectionId;\r\n            return connection\r\n                .Send(new SpeechConnectionMessage(\r\n                    MessageType.Text,\r\n                    \"speech.config\",\r\n                    requestId,\r\n                    \"application/json\",\r\n                    speechConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    private SendSpeechContext = (requestId: string, connection: IConnection, speechContextJson: string) => {\r\n        if (speechContextJson) {\r\n            return connection\r\n                .Send(new SpeechConnectionMessage(\r\n                    MessageType.Text,\r\n                    \"speech.context\",\r\n                    requestId,\r\n                    \"application/json\",\r\n                    speechContextJson));\r\n        }\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    private SendTelemetryData = (requestId: string, connection: IConnection, telemetryData: string) => {\r\n        return connection\r\n            .Send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"telemetry\",\r\n                requestId,\r\n                \"application/json\",\r\n                telemetryData));\r\n    }\r\n\r\n    private SendAudio = (\r\n        requestId: string,\r\n        connection: IConnection,\r\n        audioStreamNode: IAudioStreamNode,\r\n        requestSession: RequestSession): Promise<boolean> => {\r\n        return audioStreamNode\r\n            .Read()\r\n            .OnSuccessContinueWithPromise((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                if (requestSession.IsSpeechEnded) {\r\n                    // If service already recognized audio end then dont send any more audio\r\n                    return PromiseHelper.FromResult(true);\r\n                } else if (audioStreamChunk.IsEnd) {\r\n                    return connection\r\n                        .Send(new SpeechConnectionMessage(\r\n                            MessageType.Binary,\r\n                            \"audio\",\r\n                            requestId,\r\n                            null,\r\n                            null));\r\n                } else {\r\n                    return connection\r\n                        .Send(new SpeechConnectionMessage(\r\n                            MessageType.Binary,\r\n                            \"audio\",\r\n                            requestId,\r\n                            null,\r\n                            audioStreamChunk.Buffer))\r\n                        .OnSuccessContinueWithPromise((_: boolean) => {\r\n                            return this.SendAudio(requestId, connection, audioStreamNode, requestSession);\r\n                        });\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass RequestSession {\r\n    private isDisposed: boolean = false;\r\n    private serviceTelemetryListener: ServiceTelemetryListener;\r\n    private detachables: IDetachable[] = new Array<IDetachable>();\r\n    private requestId: string;\r\n    private audioSourceId: string;\r\n    private audioNodeId: string;\r\n    private audioNode: IAudioStreamNode;\r\n    private authFetchEventId: string;\r\n    private connectionId: string;\r\n    private serviceTag: string;\r\n    private isAudioNodeDetached: boolean = false;\r\n    private isCompleted: boolean = false;\r\n    private onEventCallback: (event: SpeechRecognitionEvent) => void;\r\n\r\n    private requestCompletionDeferral: Deferred<boolean>;\r\n\r\n    constructor(audioSourceId: string, onEventCallback: (event: SpeechRecognitionEvent) => void) {\r\n        this.audioSourceId = audioSourceId;\r\n        this.onEventCallback = onEventCallback;\r\n        this.requestId = CreateNoDashGuid();\r\n        this.audioNodeId = CreateNoDashGuid();\r\n        this.requestCompletionDeferral = new Deferred<boolean>();\r\n\r\n        this.serviceTelemetryListener = new ServiceTelemetryListener(this.requestId, this.audioSourceId, this.audioNodeId);\r\n\r\n        this.OnEvent(new RecognitionTriggeredEvent(this.RequestId, this.audioSourceId, this.audioNodeId));\r\n    }\r\n\r\n    public get RequestId(): string {\r\n        return this.requestId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n\r\n    public get CompletionPromise(): Promise<boolean> {\r\n        return this.requestCompletionDeferral.Promise();\r\n    }\r\n\r\n    public get IsSpeechEnded(): boolean {\r\n        return this.isAudioNodeDetached;\r\n    }\r\n\r\n    public get IsCompleted(): boolean {\r\n        return this.isCompleted;\r\n    }\r\n\r\n    public ListenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        this.detachables.push(eventSource.AttachListener(this.serviceTelemetryListener));\r\n    }\r\n\r\n    public OnAudioSourceAttachCompleted = (audioNode: IAudioStreamNode, isError: boolean, error?: string): void => {\r\n        this.audioNode = audioNode;\r\n        if (isError) {\r\n            this.OnComplete(RecognitionCompletionStatus.AudioSourceError, error);\r\n        } else {\r\n            this.OnEvent(new ListeningStartedEvent(this.requestId, this.audioSourceId, this.audioNodeId));\r\n        }\r\n    }\r\n\r\n    public OnPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.authFetchEventId = authFetchEventId;\r\n        this.connectionId = connectionId;\r\n        this.OnEvent(new ConnectingToServiceEvent(this.requestId, this.authFetchEventId, this.connectionId));\r\n    }\r\n\r\n    public OnAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.OnComplete(RecognitionCompletionStatus.AuthTokenFetchError, error);\r\n        }\r\n    }\r\n\r\n    public OnConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            this.OnEvent(new RecognitionStartedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId));\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.OnComplete(RecognitionCompletionStatus.UnAuthorized, reason);\r\n        } else {\r\n            this.OnComplete(RecognitionCompletionStatus.ConnectError, reason);\r\n        }\r\n    }\r\n\r\n    public OnServiceTurnStartResponse = (response: ITurnStartResponse): void => {\r\n        if (response && response.context && response.context.serviceTag) {\r\n            this.serviceTag = response.context.serviceTag;\r\n        }\r\n    }\r\n\r\n    public OnServiceSpeechStartDetectedResponse = (result: ISpeechStartDetectedResult): void => {\r\n        this.OnEvent(new SpeechStartDetectedEvent(this.RequestId, result));\r\n    }\r\n\r\n    public OnServiceSpeechHypothesisResponse = (result: ISpeechHypothesisResult): void => {\r\n        this.OnEvent(new SpeechHypothesisEvent(this.RequestId, result));\r\n    }\r\n\r\n    public OnServiceSpeechEndDetectedResponse = (result: ISpeechEndDetectedResult): void => {\r\n        this.DetachAudioNode();\r\n        this.OnEvent(new SpeechEndDetectedEvent(this.RequestId, result));\r\n    }\r\n\r\n    public OnServiceSimpleSpeechPhraseResponse = (result: ISimpleSpeechPhrase): void => {\r\n        this.OnEvent(new SpeechSimplePhraseEvent(this.RequestId, result));\r\n    }\r\n\r\n    public OnServiceDetailedSpeechPhraseResponse = (result: IDetailedSpeechPhrase): void => {\r\n        this.OnEvent(new SpeechDetailedPhraseEvent(this.RequestId, result));\r\n    }\r\n\r\n    public OnServiceTurnEndResponse = (): void => {\r\n        this.OnComplete(RecognitionCompletionStatus.Success);\r\n    }\r\n\r\n    public OnConnectionError = (error: string): void => {\r\n        this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\r\n    }\r\n\r\n    public Dispose = (error?: string): void => {\r\n        if (!this.isDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.OnComplete(RecognitionCompletionStatus.UnknownError, error);\r\n            this.isDisposed = true;\r\n            for (const detachable of this.detachables) {\r\n                detachable.Detach();\r\n            }\r\n\r\n            this.serviceTelemetryListener.Dispose();\r\n        }\r\n    }\r\n\r\n    public GetTelemetry = (): string => {\r\n        return this.serviceTelemetryListener.GetTelemetry();\r\n    }\r\n\r\n    private OnComplete = (status: RecognitionCompletionStatus, error?: string): void => {\r\n        if (!this.isCompleted) {\r\n            this.isCompleted = true;\r\n            this.DetachAudioNode();\r\n            this.OnEvent(new RecognitionEndedEvent(this.RequestId, this.audioSourceId, this.audioNodeId, this.authFetchEventId, this.connectionId, this.serviceTag, status, error ? error : \"\"));\r\n        }\r\n    }\r\n\r\n    private DetachAudioNode = (): void => {\r\n        if (!this.isAudioNodeDetached) {\r\n            this.isAudioNodeDetached = true;\r\n            if (this.audioNode) {\r\n                this.audioNode.Detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private OnEvent = (event: SpeechRecognitionEvent): void => {\r\n        this.serviceTelemetryListener.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n        if (this.onEventCallback) {\r\n            this.onEventCallback(event);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITurnStartResponse {\r\n    context: ITurnStartContext;\r\n}\r\n\r\ninterface ITurnStartContext {\r\n    serviceTag: string;\r\n}\r\n","import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Authorization\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private fetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.fetchCallback = fetchCallback;\r\n        this.fetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n\r\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\r\n    }\r\n}\r\n","import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Ocp-Apim-Subscription-Key\";\r\n\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private authInfo: AuthInfo;\r\n\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.authInfo = new AuthInfo(AuthHeader, subscriptionKey);\r\n    }\r\n\r\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.FromResult(this.authInfo);\r\n    }\r\n\r\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return PromiseHelper.FromResult(this.authInfo);\r\n    }\r\n}\r\n","import {\r\n    ArgumentNullError,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    CreateNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    PlatformEvent,\r\n    Promise,\r\n} from \"../common/Exports\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private uri: string;\r\n    private messageFormatter: IWebsocketMessageFormatter;\r\n    private connectionMessageAdapter: WebsocketMessageAdapter;\r\n    private id: string;\r\n    private isDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.messageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += i === 0 ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(queryParameters[paramName]);\r\n                    queryParams += `${paramName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += i === 0 ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.uri = uri + queryParams;\r\n        this.id = connectionId ? connectionId : CreateNoDashGuid();\r\n\r\n        this.connectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.uri,\r\n            this.Id,\r\n            this.messageFormatter);\r\n    }\r\n\r\n    public Dispose = (): void => {\r\n        this.isDisposed = true;\r\n\r\n        if (this.connectionMessageAdapter) {\r\n            this.connectionMessageAdapter.Close();\r\n        }\r\n    }\r\n\r\n    public IsDisposed = (): boolean => {\r\n        return this.isDisposed;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public State = (): ConnectionState => {\r\n        return this.connectionMessageAdapter.State;\r\n    }\r\n\r\n    public Open = (): Promise<ConnectionOpenResponse> => {\r\n        return this.connectionMessageAdapter.Open();\r\n    }\r\n\r\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\r\n        return this.connectionMessageAdapter.Send(message);\r\n    }\r\n\r\n    public Read = (): Promise<ConnectionMessage> => {\r\n        return this.connectionMessageAdapter.Read();\r\n    }\r\n\r\n    public get Events(): EventSource<PlatformEvent> {\r\n        return this.connectionMessageAdapter.Events;\r\n    }\r\n}\r\n","import { ITimer } from \"../common/Exports\";\r\n\r\nexport class Timer implements ITimer {\r\n    private delayInMillisec: number;\r\n    private timerId: number;\r\n    private successCallback: any;\r\n    constructor(delayInMillisec: number, successCallback: any) {\r\n        this.delayInMillisec = delayInMillisec;\r\n        this.successCallback = successCallback;\r\n    }\r\n    public start = (...params: any[]): void => {\r\n        if (this.timerId) {\r\n            this.stop();\r\n        }\r\n        this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\r\n    }\r\n\r\n    public stop = (): void => {\r\n        clearTimeout(this.timerId);\r\n    }\r\n}\r\n","import { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\r\n\r\nexport class SessionStorage implements IKeyValueStorage {\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return sessionStorage.getItem(key);\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        const value = sessionStorage.getItem(key);\r\n        if (value === null || value === undefined) {\r\n            sessionStorage.setItem(key, valueToAdd);\r\n        }\r\n\r\n        return sessionStorage.getItem(key);\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        sessionStorage.setItem(key, value);\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        sessionStorage.removeItem(key);\r\n    }\r\n}\r\n","import { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private mediaResources: IMediaResources;\r\n    public Record = (mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        const audioContext = new AudioContext();\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource\r\n        const mediaStreamSource = audioContext.createMediaStreamSource(mediaStream);\r\n\r\n        const desiredSampleRate = 16000;\r\n        // let compressionRatio = mediaStreamSource.context.sampleRate / desiredSampleRate;\r\n        let bufferSize = 2048;\r\n        let isFirstFrameWritten: boolean = false;\r\n        if (desiredSampleRate * 4 <= mediaStreamSource.context.sampleRate) {\r\n            bufferSize = 8192;\r\n        } else if (desiredSampleRate * 2 <= mediaStreamSource.context.sampleRate) {\r\n            bufferSize = 4096;\r\n        }\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\r\n        const scriptNode = mediaStreamSource.context.createScriptProcessor(bufferSize, 1, 1);\r\n        const waveStreamEncoder = new RiffPcmEncoder(mediaStreamSource.context.sampleRate, desiredSampleRate);\r\n\r\n        scriptNode.onaudioprocess = (audioProcessingEvent: AudioProcessingEvent) => {\r\n            const monoAudioChunk = audioProcessingEvent.inputBuffer.getChannelData(0);\r\n\r\n            let encodedAudioFrameWithRiffHeader: ArrayBuffer;\r\n            let encodedAudioFrame: ArrayBuffer;\r\n            if (outputStream) {\r\n                if (isFirstFrameWritten) {\r\n                    if (!encodedAudioFrame) {\r\n                        encodedAudioFrame = waveStreamEncoder.Encode(false, monoAudioChunk);\r\n                    }\r\n\r\n                    outputStream.Write(encodedAudioFrame);\r\n                } else {\r\n                    if (!encodedAudioFrameWithRiffHeader) {\r\n                        encodedAudioFrameWithRiffHeader =\r\n                            waveStreamEncoder.Encode(true, monoAudioChunk);\r\n                    }\r\n\r\n                    outputStream.Write(encodedAudioFrameWithRiffHeader);\r\n                    isFirstFrameWritten = true;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.mediaResources = {\r\n            context: audioContext,\r\n            scriptProcessorNode: scriptNode,\r\n            source: mediaStreamSource,\r\n            stream: mediaStream,\r\n        };\r\n\r\n        mediaStreamSource.connect(scriptNode);\r\n        scriptNode.connect(mediaStreamSource.context.destination);\r\n    }\r\n\r\n    public ReleaseMediaResources = (): void => {\r\n        if (this.mediaResources) {\r\n            if (this.mediaResources.scriptProcessorNode) {\r\n                this.mediaResources.scriptProcessorNode.disconnect();\r\n                this.mediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.mediaResources.source) {\r\n                this.mediaResources.source.disconnect();\r\n                this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                this.mediaResources.source = null;\r\n            }\r\n            if (this.mediaResources.context && this.mediaResources.context.state !== \"closed\") {\r\n                this.mediaResources.context.close();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    context: AudioContext;\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode;\r\n    stream: MediaStream;\r\n}\r\n","import { Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// getting around the build error for MediaRecorder as Typescript does nothave a definition for this one.\r\ndeclare var MediaRecorder: any;\r\n\r\nexport class OpusRecorder implements IRecorder {\r\n    private mediaResources: IMediaResources;\r\n    private mediaRecorderOptions: any;\r\n\r\n    constructor(options?: { mimeType: string, bitsPerSecond: number }) {\r\n        this.mediaRecorderOptions = options;\r\n    }\r\n\r\n    public Record = (mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const mediaRecorder: any = new MediaRecorder(mediaStream, this.mediaRecorderOptions);\r\n        const timeslice = 100; // this is in ms - 100 ensures that the chunk doesn't exceed the max size of chunk allowed in WS connection\r\n        mediaRecorder.ondataavailable = (dataAvailableEvent: any) => {\r\n            if (outputStream) {\r\n                const reader = new FileReader();\r\n                reader.readAsArrayBuffer(dataAvailableEvent.data);\r\n                reader.onloadend = (event: ProgressEvent) => {\r\n                    outputStream.Write(reader.result);\r\n                };\r\n            }\r\n        };\r\n\r\n        this.mediaResources = {\r\n            recorder: mediaRecorder,\r\n            stream: mediaStream,\r\n        };\r\n        mediaRecorder.start(timeslice);\r\n    }\r\n\r\n    public ReleaseMediaResources = (): void => {\r\n        if (this.mediaResources.recorder.state !== \"inactive\") {\r\n            this.mediaResources.recorder.stop();\r\n        }\r\n        this.mediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    stream: MediaStream;\r\n    recorder: any;\r\n}\r\n\r\n/* Declaring this inline to avoid compiler warnings\r\ndeclare class MediaRecorder {\r\n    constructor(mediaStream: MediaStream, options: any);\r\n\r\n    public state: string;\r\n\r\n    public ondataavailable(dataAvailableEvent: any): void;\r\n    public stop(): void;\r\n}*/\r\n","import {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    CreateNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n    Promise,\r\n    PromiseHelper,\r\n    Stream,\r\n    StreamReader,\r\n} from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigatorUserMedia extends NavigatorUserMedia {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private streams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private id: string;\r\n\r\n    private events: EventSource<PlatformEvent>;\r\n\r\n    private initializeDeferral: Deferred<boolean>;\r\n\r\n    private recorder: IRecorder;\r\n\r\n    private mediaStream: MediaStream;\r\n\r\n    public constructor(recorder: IRecorder, audioSourceId?: string) {\r\n        this.id = audioSourceId ? audioSourceId : CreateNoDashGuid();\r\n        this.events = new EventSource();\r\n        this.recorder = recorder;\r\n    }\r\n\r\n    public TurnOn = (): Promise<boolean> => {\r\n        if (this.initializeDeferral) {\r\n            return this.initializeDeferral.Promise();\r\n        }\r\n\r\n        this.initializeDeferral = new Deferred<boolean>();\r\n\r\n        const nav = window.navigator as INavigatorUserMedia;\r\n        window.navigator.getUserMedia = (\r\n            window.navigator.getUserMedia ||\r\n            (window.navigator as INavigatorUserMedia).webkitGetUserMedia ||\r\n            (window.navigator as INavigatorUserMedia).mozGetUserMedia ||\r\n            (window.navigator as INavigatorUserMedia).msGetUserMedia\r\n        );\r\n\r\n        if (!window.navigator.getUserMedia) {\r\n            const errorMsg = \"Browser doesnot support getUserMedia.\";\r\n            this.initializeDeferral.Reject(errorMsg);\r\n            this.OnEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            this.OnEvent(new AudioSourceInitializingEvent(this.id)); // no stream id\r\n            window.navigator.getUserMedia(\r\n                { audio: true },\r\n                (mediaStream: MediaStream) => {\r\n                    this.mediaStream = mediaStream;\r\n                    this.OnEvent(new AudioSourceReadyEvent(this.id));\r\n                    this.initializeDeferral.Resolve(true);\r\n\r\n                }, (error: MediaStreamError) => {\r\n                    const errorMsg = `Error occured processing the user media stream. ${error}`;\r\n                    this.initializeDeferral.Reject(errorMsg);\r\n                    this.OnEvent(new AudioSourceErrorEvent(this.id, errorMsg));\r\n                });\r\n        }\r\n\r\n        return this.initializeDeferral.Promise();\r\n    }\r\n\r\n    public Id = (): string => {\r\n        return this.id;\r\n    }\r\n\r\n    public Attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.OnEvent(new AudioStreamNodeAttachingEvent(this.id, audioNodeId));\r\n\r\n        return this.Listen(audioNodeId).OnSuccessContinueWith<IAudioStreamNode>(\r\n            (streamReader: StreamReader<ArrayBuffer>) => {\r\n                this.OnEvent(new AudioStreamNodeAttachedEvent(this.id, audioNodeId));\r\n                return {\r\n                    Detach: () => {\r\n                        streamReader.Close();\r\n                        delete this.streams[audioNodeId];\r\n                        this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n                        this.TurnOff();\r\n                    },\r\n                    Id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    Read: () => {\r\n                        return streamReader.Read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public Detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.streams[audioNodeId]) {\r\n            this.streams[audioNodeId].Close();\r\n            delete this.streams[audioNodeId];\r\n            this.OnEvent(new AudioStreamNodeDetachedEvent(this.id, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public TurnOff = (): Promise<boolean> => {\r\n        for (const streamId in this.streams) {\r\n            if (streamId) {\r\n                const stream = this.streams[streamId];\r\n                if (stream) {\r\n                    stream.Close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.recorder.ReleaseMediaResources();\r\n\r\n        this.OnEvent(new AudioSourceOffEvent(this.id)); // no stream now\r\n        this.initializeDeferral = null;\r\n        return PromiseHelper.FromResult(true);\r\n    }\r\n\r\n    public get Events(): EventSource<AudioSourceEvent> {\r\n        return this.events;\r\n    }\r\n\r\n    private Listen = (audioNodeId: string): Promise<StreamReader<ArrayBuffer>> => {\r\n        return this.TurnOn()\r\n            .OnSuccessContinueWith<StreamReader<ArrayBuffer>>((_: boolean) => {\r\n                const stream = new Stream<ArrayBuffer>(audioNodeId);\r\n                this.streams[audioNodeId] = stream;\r\n\r\n                try {\r\n                    this.recorder.Record(this.mediaStream, stream);\r\n                } catch (error) {\r\n                    const errorMsg = `Error occured processing the user media stream. ${error}`;\r\n                    this.initializeDeferral.Reject(errorMsg);\r\n                    this.OnEvent(new AudioStreamNodeErrorEvent(this.id, audioNodeId, error));\r\n                }\r\n\r\n                return stream.GetReader();\r\n            });\r\n    }\r\n\r\n    private OnEvent = (event: AudioSourceEvent): void => {\r\n        this.events.OnEvent(event);\r\n        Events.Instance.OnEvent(event);\r\n    }\r\n}\r\n","import { ArgumentNullError, IKeyValueStorage } from \"../common/Exports\";\r\n\r\nexport class LocalStorage implements IKeyValueStorage {\r\n\r\n    public Get = (key: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        const value = localStorage.getItem(key);\r\n        if (value === null || value === undefined) {\r\n            localStorage.setItem(key, valueToAdd);\r\n        }\r\n\r\n        return localStorage.getItem(key);\r\n    }\r\n\r\n    public Set = (key: string, value: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        localStorage.setItem(key, value);\r\n    }\r\n\r\n    public Remove = (key: string): void => {\r\n        if (!key) {\r\n            throw new ArgumentNullError(\"key\");\r\n        }\r\n\r\n        localStorage.removeItem(key);\r\n    }\r\n}\r\n","import { InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { Promise } from \"./Promise\";\r\nimport { Queue } from \"./Queue\";\r\nimport { IStreamChunk } from \"./Stream\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    IsEnd: boolean;\r\n    Buffer: TBuffer;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private id: string;\r\n    private readerIdCounter: number = 1;\r\n    private streambuffer: Array<IStreamChunk<TBuffer>>;\r\n    private isEnded: boolean = false;\r\n    private readerQueues: IStringDictionary<Queue<IStreamChunk<TBuffer>>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.id = streamId ? streamId : CreateNoDashGuid();\r\n        this.streambuffer = [];\r\n        this.readerQueues = {};\r\n    }\r\n\r\n    public get IsClosed(): boolean {\r\n        return this.isEnded;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n\r\n    public Write = (buffer: TBuffer): void => {\r\n        this.ThrowIfClosed();\r\n        this.WriteStreamChunk({\r\n            Buffer: buffer,\r\n            IsEnd: false,\r\n        });\r\n    }\r\n\r\n    public GetReader = (): StreamReader<TBuffer> => {\r\n        const readerId = this.readerIdCounter;\r\n        this.readerIdCounter++;\r\n        const readerQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        const currentLength = this.streambuffer.length;\r\n        this.readerQueues[readerId] = readerQueue;\r\n        for (let i = 0; i < currentLength; i++) {\r\n            readerQueue.Enqueue(this.streambuffer[i]);\r\n        }\r\n        return new StreamReader(\r\n            this.id,\r\n            readerQueue,\r\n            () => {\r\n                delete this.readerQueues[readerId];\r\n            });\r\n    }\r\n\r\n    public Close = (): void => {\r\n        if (!this.isEnded) {\r\n            this.WriteStreamChunk({\r\n                Buffer: null,\r\n                IsEnd: true,\r\n            });\r\n            this.isEnded = true;\r\n        }\r\n    }\r\n\r\n    private WriteStreamChunk = (streamChunk: IStreamChunk<TBuffer>): void => {\r\n        this.ThrowIfClosed();\r\n        this.streambuffer.push(streamChunk);\r\n        for (const readerId in this.readerQueues) {\r\n            if (!this.readerQueues[readerId].IsDisposed()) {\r\n                try {\r\n                    this.readerQueues[readerId].Enqueue(streamChunk);\r\n                } catch (e) {\r\n                    // Do nothing\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private ThrowIfClosed = (): void => {\r\n        if (this.isEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class StreamReader<TBuffer> {\r\n    private readerQueue: Queue<IStreamChunk<TBuffer>>;\r\n    private onClose: () => void;\r\n    private isClosed: boolean = false;\r\n    private streamId: string;\r\n\r\n    public constructor(streamId: string, readerQueue: Queue<IStreamChunk<TBuffer>>, onClose: () => void) {\r\n        this.readerQueue = readerQueue;\r\n        this.onClose = onClose;\r\n        this.streamId = streamId;\r\n    }\r\n\r\n    public get IsClosed(): boolean {\r\n        return this.isClosed;\r\n    }\r\n\r\n    public get StreamId(): string {\r\n        return this.streamId;\r\n    }\r\n\r\n    public Read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.IsClosed) {\r\n            throw new InvalidOperationError(\"StreamReader closed\");\r\n        }\r\n\r\n        return this.readerQueue\r\n            .Dequeue()\r\n            .OnSuccessContinueWith((streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk.IsEnd) {\r\n                    this.readerQueue.Dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n\r\n    public Close = (): void => {\r\n        if (!this.isClosed) {\r\n            this.isClosed = true;\r\n            this.readerQueue.Dispose(\"StreamReader closed\");\r\n            this.onClose();\r\n        }\r\n    }\r\n}\r\n","import { ArgumentNullError } from \"./Error\";\r\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\r\nimport { InMemoryStorage } from \"./InMemoryStorage\";\r\n\r\nexport class Storage {\r\n    private static sessionStorage: IKeyValueStorage = new InMemoryStorage();\r\n    private static localStorage: IKeyValueStorage = new InMemoryStorage();\r\n\r\n    public static SetSessionStorage = (sessionStorage: IKeyValueStorage): void => {\r\n        if (!sessionStorage) {\r\n            throw new ArgumentNullError(\"sessionStorage\");\r\n        }\r\n\r\n        Storage.sessionStorage = sessionStorage;\r\n    }\r\n\r\n    public static SetLocalStorage = (localStorage: IKeyValueStorage): void => {\r\n        if (!localStorage) {\r\n            throw new ArgumentNullError(\"localStorage\");\r\n        }\r\n\r\n        Storage.localStorage = localStorage;\r\n    }\r\n\r\n    public static get Session(): IKeyValueStorage {\r\n        return Storage.sessionStorage;\r\n    }\r\n\r\n    public static get Local(): IKeyValueStorage {\r\n        return Storage.localStorage;\r\n    }\r\n}\r\n","\r\nexport class RiffPcmEncoder {\r\n\r\n    private actualSampleRate: number;\r\n    private desiredSampleRate: number;\r\n    private channelCount: number = 1;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.actualSampleRate = actualSampleRate;\r\n        this.desiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public Encode = (\r\n        isFirstAudioFrame: boolean,\r\n        actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n        const audioFrame = this.DownSampleAudioFrame(actualAudioFrame, this.actualSampleRate, this.desiredSampleRate);\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        if (!isFirstAudioFrame) {\r\n            const buffer = new ArrayBuffer(audioLength);\r\n            const view = new DataView(buffer);\r\n            this.FloatTo16BitPCM(view, 0, audioFrame);\r\n\r\n            return buffer;\r\n        }\r\n\r\n        const buffer = new ArrayBuffer(44 + audioLength);\r\n\r\n        const bitsPerSample = 16;\r\n        const bytesPerSample = bitsPerSample / 8;\r\n        // We dont know ahead of time about the length of audio to stream. So set to 0.\r\n        const fileLength = 0;\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n        const view = new DataView(buffer);\r\n\r\n        /* RIFF identifier */\r\n        this.SetString(view, 0, \"RIFF\");\r\n        /* file length */\r\n        view.setUint32(4, fileLength, true);\r\n        /* RIFF type & Format */\r\n        this.SetString(view, 8, \"WAVEfmt \");\r\n        /* format chunk length */\r\n        view.setUint32(16, 16, true);\r\n        /* sample format (raw) */\r\n        view.setUint16(20, 1, true);\r\n        /* channel count */\r\n        view.setUint16(22, this.channelCount, true);\r\n        /* sample rate */\r\n        view.setUint32(24, this.desiredSampleRate, true);\r\n        /* byte rate (sample rate * block align) */\r\n        view.setUint32(28, this.desiredSampleRate * this.channelCount * bytesPerSample, true);\r\n        /* block align (channel count * bytes per sample) */\r\n        view.setUint16(32, this.channelCount * bytesPerSample, true);\r\n        /* bits per sample */\r\n        view.setUint16(34, bitsPerSample, true);\r\n        /* data chunk identifier */\r\n        this.SetString(view, 36, \"data\");\r\n        /* data chunk length */\r\n        view.setUint32(40, fileLength, true);\r\n\r\n        this.FloatTo16BitPCM(view, 44, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private SetString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private FloatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private DownSampleAudioFrame = (\r\n        audioFrame: Float32Array,\r\n        actualSampleRate: number,\r\n        desiredSamplerate: number): Float32Array => {\r\n\r\n        if (desiredSamplerate === actualSampleRate || desiredSamplerate > actualSampleRate) {\r\n            return audioFrame;\r\n        }\r\n\r\n        const sampleRateRatio = actualSampleRate / desiredSamplerate;\r\n        const newLength = Math.round(audioFrame.length / sampleRateRatio);\r\n        const downSampledAudioFrame = new Float32Array(newLength);\r\n        let offsetResult = 0;\r\n        let offsetBuffer = 0;\r\n        while (offsetResult < downSampledAudioFrame.length) {\r\n            const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            for (let i = offsetBuffer; i < nextOffsetBuffer && i < audioFrame.length; i++) {\r\n                accum += audioFrame[i];\r\n                count++;\r\n            }\r\n            downSampledAudioFrame[offsetResult] = accum / count;\r\n            offsetResult++;\r\n            offsetBuffer = nextOffsetBuffer;\r\n        }\r\n\r\n        return downSampledAudioFrame;\r\n    }\r\n}\r\n","import { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { CreateNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n\r\n    private messageType: MessageType;\r\n    private payload: any = null;\r\n    private id: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && !(payload instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.messageType = messageType;\r\n        this.payload = payload;\r\n        this.id = id ? id : CreateNoDashGuid();\r\n    }\r\n\r\n    public get MessageType(): MessageType {\r\n        return this.messageType;\r\n    }\r\n\r\n    public get Payload(): any {\r\n        return this.payload;\r\n    }\r\n\r\n    public get TextContent(): string {\r\n        if (this.messageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.payload as string;\r\n    }\r\n\r\n    public get BinaryContent(): ArrayBuffer {\r\n        if (this.messageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.payload;\r\n    }\r\n\r\n    public get Id(): string {\r\n        return this.id;\r\n    }\r\n}\r\n","import { ConnectionEvent } from \"./ConnectionEvents\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { Promise } from \"./Promise\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection extends IDisposable {\r\n    Id: string;\r\n    State(): ConnectionState;\r\n    Open(): Promise<ConnectionOpenResponse>;\r\n    Send(message: ConnectionMessage): Promise<boolean>;\r\n    Read(): Promise<ConnectionMessage>;\r\n    Events: EventSource<ConnectionEvent>;\r\n}\r\n","import { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.instance = eventSource;\r\n    }\r\n\r\n    public static get Instance(): IEventSource<PlatformEvent> {\r\n        return Events.instance;\r\n    }\r\n}\r\n","\r\nexport class ConnectionOpenResponse {\r\n    private statusCode: number;\r\n    private reason: string;\r\n\r\n    constructor(statusCode: number, reason: string) {\r\n        this.statusCode = statusCode;\r\n        this.reason = reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n}\r\n","import { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private connectionId: string;\r\n\r\n    constructor(connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventType);\r\n        this.connectionId = connectionId;\r\n    }\r\n\r\n    public get ConnectionId(): string {\r\n        return this.connectionId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private uri: string;\r\n    private headers: IStringDictionary<string>;\r\n\r\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(connectionId);\r\n        this.uri = uri;\r\n        this.headers = headers;\r\n    }\r\n\r\n    public get Uri(): string {\r\n        return this.uri;\r\n    }\r\n\r\n    public get Headers(): IStringDictionary<string> {\r\n        return this.headers;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\r\n        super(connectionId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private reason: string;\r\n    private statusCode: number;\r\n\r\n    constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(connectionId, EventType.Warning);\r\n        this.reason = reason;\r\n        this.statusCode = statusCode;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private statusCode: number;\r\n    private reason: string;\r\n\r\n    constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(connectionId, EventType.Error);\r\n        this.statusCode = statuscode;\r\n        this.reason = reason;\r\n    }\r\n\r\n    public get Reason(): string {\r\n        return this.reason;\r\n    }\r\n\r\n    public get StatusCode(): number {\r\n        return this.statusCode;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private networkReceivedTime: string;\r\n    private message: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(connectionId);\r\n        this.networkReceivedTime = networkReceivedTimeISO;\r\n        this.message = message;\r\n    }\r\n\r\n    public get NetworkReceivedTime(): string {\r\n        return this.networkReceivedTime;\r\n    }\r\n\r\n    public get Message(): ConnectionMessage {\r\n        return this.message;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private networkSentTime: string;\r\n    private message: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(connectionId);\r\n        this.networkSentTime = networkSentTimeISO;\r\n        this.message = message;\r\n    }\r\n\r\n    public get NetworkSentTime(): string {\r\n        return this.networkSentTime;\r\n    }\r\n\r\n    public get Message(): ConnectionMessage {\r\n        return this.message;\r\n    }\r\n}\r\n","import { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private audioSourceId: string;\r\n\r\n    constructor(audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventType);\r\n        this.audioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get AudioSourceId(): string {\r\n        return this.audioSourceId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(audioSourceId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private error: string;\r\n    constructor(audioSourceId: string, error: string) {\r\n        super(audioSourceId, EventType.Error);\r\n        this.error = error;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private audioNodeId: string;\r\n\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(audioSourceId);\r\n        this.audioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get AudioNodeId(): string {\r\n        return this.audioNodeId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private error: string;\r\n\r\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(audioSourceId, audioNodeId);\r\n        this.error = error;\r\n    }\r\n\r\n    public get Error(): string {\r\n        return this.error;\r\n    }\r\n}\r\n","import { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private logLevelFilter: EventType;\r\n\r\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n        this.logLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public OnEvent = (event: PlatformEvent): void => {\r\n        if (event.EventType >= this.logLevelFilter) {\r\n            const log = this.ToString(event);\r\n\r\n            switch (event.EventType) {\r\n                case EventType.Debug:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case EventType.Info:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.info(log);\r\n                    break;\r\n                case EventType.Warning:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case EventType.Error:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private ToString = (event: any): string => {\r\n        const logFragments = [\r\n            `${event.EventTime}`,\r\n        ];\r\n\r\n        if (event.constructor && event.constructor.name) {\r\n            logFragments.push(`${event.constructor.name}`);\r\n        }\r\n\r\n        for (const prop in event) {\r\n            if (prop && prop !== \"EventTime\" && prop !== \"EventType\" && prop !== \"EventId\" && prop !== \"constructor\") {\r\n                const value = event[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","import { ConsoleLoggingListener, LocalStorage, SessionStorage } from \"./src/common.browser/Exports\";\r\nimport { Events, Storage } from \"./src/common/Exports\";\r\n\r\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\r\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\r\nEvents.Instance.AttachListener(new ConsoleLoggingListener());\r\n\r\nexport * from \"./src/common/Exports\";\r\nexport * from \"./src/common.browser/Exports\";\r\nexport * from \"./src/sdk/speech/Exports\";\r\nexport * from \"./src/sdk/speech.browser/Exports\";\r\n","import { Speech, Func, Action } from '../SpeechModule'\nimport * as konsole from '../Konsole';\nimport * as CognitiveSpeech from 'microsoft-speech-browser-sdk/Speech.Browser.Sdk'\n\nexport interface ICognitiveServicesSpeechRecognizerProperties {\n    locale?: string,\n    subscriptionKey?: string,\n    fetchCallback?: (authFetchEventId: string) => Promise<string>,\n    fetchOnExpiryCallback?: (authFetchEventId: string) => Promise<string>\n}\n\nexport class SpeechRecognizer implements Speech.ISpeechRecognizer {\n    public audioStreamStartInitiated: boolean = false;\n    public isStreamingToService: boolean = false;\n    public onIntermediateResult: Func<string, void> = null;\n    public onFinalResult: Func<string, void> = null;\n    public onAudioStreamingToService: Action = null;\n    public onRecognitionFailed: Action = null;\n    public locale: string = null;\n    public referenceGrammarId: string;\n\n    private actualRecognizer: any = null;\n    private properties: ICognitiveServicesSpeechRecognizerProperties;\n\n    constructor(properties: ICognitiveServicesSpeechRecognizerProperties = {}) {\n        this.properties = properties;\n        const recognitionMode = CognitiveSpeech.RecognitionMode.Interactive;\n        const format = CognitiveSpeech.SpeechResultFormat.Simple;\n        const locale = properties.locale || 'en-US';\n\n        let recognizerConfig = new CognitiveSpeech.RecognizerConfig(\n            new CognitiveSpeech.SpeechConfig(\n                new CognitiveSpeech.Context(\n                    new CognitiveSpeech.OS(navigator.userAgent, \"Browser\", null),\n                    new CognitiveSpeech.Device(\"WebChat\", \"WebChat\", \"1.0.00000\"))),\n            recognitionMode,        // Speech.RecognitionMode.Interactive  (Options - Interactive/Conversation/Dictation>)\n            locale,                 // Supported laguages are specific to each recognition mode. Refer to docs.\n            format\n        );                // Speech.SpeechResultFormat.Simple (Options - Simple/Detailed)\n\n        let authentication;\n        if (properties.subscriptionKey) {\n            authentication = new CognitiveSpeech.CognitiveSubscriptionKeyAuthentication(properties.subscriptionKey);\n        } else if (properties.fetchCallback && properties.fetchOnExpiryCallback) {\n            authentication = new CognitiveSpeech.CognitiveTokenAuthentication(\n                (authFetchEventId: string) => {\n                    let d = new CognitiveSpeech.Deferred<string>();\n                    this.properties.fetchCallback(authFetchEventId).then(value => d.Resolve(value), err => d.Reject(err));\n                    return d.Promise();\n                },\n                (authFetchEventId: string) => {\n                    let d = new CognitiveSpeech.Deferred<string>();\n                    this.properties.fetchOnExpiryCallback(authFetchEventId).then(value => d.Resolve(value), err => d.Reject(err));\n                    return d.Promise();\n                }\n            );\n        } else {\n            throw 'Error: The CognitiveServicesSpeechRecognizer requires either a subscriptionKey or a fetchCallback and fetchOnExpiryCallback.';\n        }\n\n        if(window.navigator.getUserMedia){\n            this.actualRecognizer = CognitiveSpeech.CreateRecognizer(recognizerConfig, authentication);\n        }\n        else{\n            console.error(\"This browser does not support speech recognition\");\n        }\n    }\n\n    public warmup() {\n    }\n\n    public startRecognizing() {\n        if (!this.actualRecognizer) {\n            this.log('ERROR: no recognizer?');\n            return;\n        }\n        let eventhandler = (event: any) => {\n            this.log(event.Name);\n            switch (event.Name) {\n                case 'RecognitionTriggeredEvent':\n                case 'ListeningStartedEvent':\n                case 'SpeechStartDetectedEvent':\n                case 'SpeechEndDetectedEvent':\n                case 'SpeechDetailedPhraseEvent':\n                case 'ConnectingToServiceEvent':\n                    break;\n                case 'RecognitionStartedEvent':\n                    if (this.onAudioStreamingToService) {\n                        this.onAudioStreamingToService()\n                    }\n                    this.isStreamingToService = true;\n                    break;\n                case 'SpeechHypothesisEvent':\n                    let hypothesisEvent = event as CognitiveSpeech.SpeechHypothesisEvent;\n                    this.log('Hypothesis Result: ' + hypothesisEvent.Result.Text);\n                    if (this.onIntermediateResult) {\n                        this.onIntermediateResult(hypothesisEvent.Result.Text);\n                    }\n                    break;\n                case 'SpeechSimplePhraseEvent':\n                    let simplePhraseEvent = event as CognitiveSpeech.SpeechSimplePhraseEvent;\n                    if (CognitiveSpeech.RecognitionStatus[simplePhraseEvent.Result.RecognitionStatus] as any === CognitiveSpeech.RecognitionStatus.Success) {\n                        if (this.onFinalResult) {\n                            this.onFinalResult(simplePhraseEvent.Result.DisplayText);\n                        }\n                    } else {\n                        if (this.onRecognitionFailed) {\n                            this.onRecognitionFailed();\n                        }\n                        this.log('Recognition Status: ' + simplePhraseEvent.Result.RecognitionStatus.toString());\n                    }\n                    break;\n                case 'RecognitionEndedEvent':\n                    this.isStreamingToService = false;\n                    break;\n                default:\n                    this.log(event.Name + \" is unexpected\");\n            }\n        }\n\n        let speechContext = null;\n        if (this.referenceGrammarId) {\n            speechContext = JSON.stringify({\n                dgi: {\n                    Groups: [\n                        {\n                            Type: \"Generic\",\n                            Hints: { ReferenceGrammar: this.referenceGrammarId }\n                        }\n                    ]\n                }\n            });\n        }\n\n        this.actualRecognizer.Recognize(eventhandler, speechContext);\n    }\n\n    public speechIsAvailable(){\n        return this.actualRecognizer != null;\n    }\n\n    public stopRecognizing() {\n        if (this.actualRecognizer != null) {\n            this.actualRecognizer.AudioSource.TurnOff();\n        }\n        this.isStreamingToService = false;\n    }\n\n    private log(message: string) {\n        konsole.log('CognitiveServicesSpeechRecognizer: ' + message);\n    }\n}\n","export { SpeechRecognizer } from './SpeechRecognition'\nexport { SpeechSynthesizer, SynthesisGender } from './SpeechSynthesis'\n"],"sourceRoot":""}